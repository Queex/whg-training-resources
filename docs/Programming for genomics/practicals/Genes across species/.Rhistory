# sample(): a helper function to pick one item from a set of possibilities
sample <- function( from, probabilities ) {
u = runif(1)
return( from[min(which( cumsum(probabilities) >= u ))] )
},
# emit(): pick a talk uniformly among remaining talks with the given type
# if there's no such talk left we return an 'empty' talk (i.e. NULL)
emit <- function( talks, schedule, type ) {
w = which( talks$type == type & !talks$who %in% schedule$who )
if( length(w) > 0 ) {
pick = hmm$sample( w, probabilities = rep( 1/length(w), length(w) ))
return( talks[pick, ] )
} else {
return(NULL)
}
},
# initialise(): Pick an initial talk
initialise = function( talks, initialProbs ) {
schedule = data.frame()
talkType = hmm$sample( names( initialProbs ), probabilities = initialProbs )
talk = hmm$emit( talks, schedule, talkType )
schedule = rbind( schedule, talk )
return( schedule )
},
# step(): Pick the next talk, given last currently scheduled talk type.
step = function( talks, schedule, transitions ) {
currentTalk = schedule[nrow( schedule ), ]
# transition to next type of talk
nextTalkType = hmm$sample( c( "GMS", "non-GMS" ), probabilities = transitions[currentTalk$type,] )
# pick a new talk
nextTalk = hmm$emit( talks, schedule, nextTalkType )
if( is.null( nextTalk )) {
cat( sprintf( "No %s talks left to emit, emitting an empty talk.\n", nextTalkType ))
} else {
schedule = rbind( schedule, nextTalk )
cat( sprintf( "Emitted the talk from %s.  Schedule is:\n", nextTalk$name ))
}
return( schedule )
}
)
schedule = hmm$initialise( talks, initialProbs ); print( schedule ) ;
initialProbs
hmm$initialise( talks, initialProbs )
hmm$sample
print( formatSchedule( schedule ))
formatSchedule <- function(
schedule,
startTimeInMinutesPastMidnight = (12*60) + 20,
talkDurationInMinutes = 5
) {
# Function to print a talk start and end time
formatTime <- function( start.time, duration = 5 ) {
end.time = start.time + duration
start.hour = floor( start.time / 60 )
end.hour = floor( end.time / 60 )
start.minute = start.time - 60 * start.hour
end.minute = end.time - 60 * end.hour
sprintf( "%.2d:%.2d - %.2d:%.2d", start.hour, start.minute, end.hour, end.minute )
}
times = seq( from = startTimeInMinutesPastMidnight, length = nrow( schedule ), by = talkDurationInMinutes + 2 )
schedule$time = formatTime( times )
schedule = rbind(
data.frame( who = "-", title = "Lunch / setup", type = "-", time = "12:00 - 12:20" ),
schedule,
data.frame( who = "-", title = "Wrap-up", type = "-", time = "13:15 - 13:30" )
)
return( schedule )
}
# Print it
print( formatSchedule( schedule ))
First we'll build a data frame of talks:
```R
talks = list(
Arni = "Genomic inflation and genomic control",
Jennifer = "Gibbs sampling",
Lino = "Statistical methods for analysing hierarchical phenotype data",
Minette = "Bayes Theorem",
Samvida = "Mendelian randomisation",
Nina = "Associating endometriosis and immunological diseases using population-scale health records",
Emine = "Topic modelling and clustering for scATAC-seq data",
Jiayuan = "Fine-mapping"
)
# Turn them into a data frame
talks = data.frame(
who = names( talks ),
title = unlist( talks ),
type = c( rep( "GMS", 5 ), rep( "non-GMS", 3 )),
row.names = NULL
)
View(talks)
```R
initialProbs = c( GMS = 1, 'non-GMS' = 0 )
```
Like this:
```R
transitions = matrix(
nrow = 2, ncol = 2, dimnames = list(
c( "GMS", "non-GMS" ),
c( "GMS", "non-GMS" )
)
)
transitions["GMS",] = c( 1/8, 7/8 )
transitions["non-GMS",] = c( 7/8, 1/8 )
```
Here is some code to run the HMM.  I like to try to collect related code into objects - I'll use an R list to collect the various functions.  (A better programmer might refer to the [R OO field guide](http://adv-r.had.co.nz/OO-essentials.html) here.)
```R
hmm = list(
Like this:
```R
transitions = matrix(
nrow = 2, ncol = 2, dimnames = list(
c( "GMS", "non-GMS" ),
c( "GMS", "non-GMS" )
)
)
transitions["GMS",] = c( 1/8, 7/8 )
transitions["non-GMS",] = c( 7/8, 1/8 )
```
```R
initialProbs = c( GMS = 1, 'non-GMS' = 0 )
```
initialProbs = c( GMS = 1, 'non-GMS' = 0 )
```
initialProbs = c( GMS = 1, 'non-GMS' = 0 )
```
```R
initialProbs = c( GMS = 1, 'non-GMS' = 0 )
```
transitions = matrix(
nrow = 2, ncol = 2, dimnames = list(
c( "GMS", "non-GMS" ),
c( "GMS", "non-GMS" )
)
)
transitions["GMS",] = c( 1/8, 7/8 )
transitions["non-GMS",] = c( 7/8, 1/8 )
hmm = list(
# sample(): a helper function to pick one item from a set of possibilities
sample = function( from, probabilities ) {
u = runif(1)
return( from[min(which( cumsum(probabilities) >= u ))] )
},
# emit(): pick a talk uniformly among remaining talks with the given type
# if there's no such talk left we return an 'empty' talk (i.e. NULL)
emit = function( talks, schedule, type ) {
w = which( talks$type == type & !talks$who %in% schedule$who )
if( length(w) > 0 ) {
pick = hmm$sample( w, probabilities = rep( 1/length(w), length(w) ))
return( talks[pick, ] )
} else {
return(NULL)
}
},
# initialise(): Pick an initial talk
initialise = function( talks, initialProbs ) {
schedule = data.frame()
talkType = hmm$sample( names( initialProbs ), probabilities = initialProbs )
talk = hmm$emit( talks, schedule, talkType )
schedule = rbind( schedule, talk )
return( schedule )
},
# step(): Pick the next talk, given last currently scheduled talk type.
step = function( talks, schedule, transitions ) {
currentTalk = schedule[nrow( schedule ), ]
# transition to next type of talk
nextTalkType = hmm$sample( c( "GMS", "non-GMS" ), probabilities = transitions[currentTalk$type,] )
# pick a new talk
nextTalk = hmm$emit( talks, schedule, nextTalkType )
if( is.null( nextTalk )) {
cat( sprintf( "No %s talks left to emit, emitting an empty talk.\n", nextTalkType ))
} else {
schedule = rbind( schedule, nextTalk )
cat( sprintf( "Emitted the talk from %s.  Schedule is:\n", nextTalk$name ))
}
return( schedule )
}
)
schedule = hmm$initialise( talks, initialProbs ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
formatSchedule <- function(
schedule,
startTimeInMinutesPastMidnight = (12*60) + 20,
talkDurationInMinutes = 5
) {
# Function to print a talk start and end time
formatTime <- function( start.time, duration = 5 ) {
end.time = start.time + duration
start.hour = floor( start.time / 60 )
end.hour = floor( end.time / 60 )
start.minute = start.time - 60 * start.hour
end.minute = end.time - 60 * end.hour
sprintf( "%.2d:%.2d - %.2d:%.2d", start.hour, start.minute, end.hour, end.minute )
}
times = seq( from = startTimeInMinutesPastMidnight, length = nrow( schedule ), by = talkDurationInMinutes + 2 )
schedule$time = formatTime( times )
schedule = rbind(
data.frame( who = "-", title = "Lunch / setup", type = "-", time = "12:00 - 12:20" ),
schedule,
data.frame( who = "-", title = "Wrap-up", type = "-", time = "13:15 - 13:30" )
)
return( schedule )
}
print( formatSchedule( schedule ))
talks = list(
Arni = "Genomic inflation and genomic control",
Jennifer = "Gibbs sampling",
Lino = "Statistical methods for analysing hierarchical phenotype data",
Minette = "Bayes Theorem",
Samvida = "Mendelian randomisation",
Nina = "Associating endometriosis and immunological diseases using population-scale health records",
Emine = "Topic modelling and clustering for scATAC-seq data",
Jiayuan = "Fine-mapping"
)
# Turn them into a data frame
talks = data.frame(
who = names( talks ),
title = unlist( talks ),
type = c( rep( "GMS", 5 ), rep( "non-GMS", 3 )),
row.names = NULL
)
initialProbs = c( GMS = 1, 'non-GMS' = 0 )
transitions = matrix(
nrow = 2, ncol = 2, dimnames = list(
c( "GMS", "non-GMS" ),
c( "GMS", "non-GMS" )
)
)
transitions["GMS",] = c( 1/8, 7/8 )
transitions["non-GMS",] = c( 7/8, 1/8 )
hmm = list(
# sample(): a helper function to pick one item from a set of possibilities
sample = function( from, probabilities ) {
u = runif(1)
return( from[min(which( cumsum(probabilities) >= u ))] )
},
# emit(): pick a talk uniformly among remaining talks with the given type
# if there's no such talk left we return an 'empty' talk (i.e. NULL)
emit = function( talks, schedule, type ) {
w = which( talks$type == type & !talks$who %in% schedule$who )
if( length(w) > 0 ) {
pick = hmm$sample( w, probabilities = rep( 1/length(w), length(w) ))
return( talks[pick, ] )
} else {
return(NULL)
}
},
# initialise(): Pick an initial talk
initialise = function( talks, initialProbs ) {
schedule = data.frame()
talkType = hmm$sample( names( initialProbs ), probabilities = initialProbs )
talk = hmm$emit( talks, schedule, talkType )
schedule = rbind( schedule, talk )
return( schedule )
},
# step(): Pick the next talk, given last currently scheduled talk type.
step = function( talks, schedule, transitions ) {
currentTalk = schedule[nrow( schedule ), ]
# transition to next type of talk
nextTalkType = hmm$sample( c( "GMS", "non-GMS" ), probabilities = transitions[currentTalk$type,] )
# pick a new talk
nextTalk = hmm$emit( talks, schedule, nextTalkType )
if( is.null( nextTalk )) {
cat( sprintf( "No %s talks left to emit, emitting an empty talk.\n", nextTalkType ))
} else {
schedule = rbind( schedule, nextTalk )
cat( sprintf( "Emitted the talk from %s.  Schedule is:\n", nextTalk$name ))
}
return( schedule )
}
)
formatSchedule <- function(
schedule,
startTimeInMinutesPastMidnight = (12*60) + 20,
talkDurationInMinutes = 5
) {
# Function to print a talk start and end time
formatTime <- function( start.time, duration = 5 ) {
end.time = start.time + duration
start.hour = floor( start.time / 60 )
end.hour = floor( end.time / 60 )
start.minute = start.time - 60 * start.hour
end.minute = end.time - 60 * end.hour
sprintf( "%.2d:%.2d - %.2d:%.2d", start.hour, start.minute, end.hour, end.minute )
}
times = seq( from = startTimeInMinutesPastMidnight, length = nrow( schedule ), by = talkDurationInMinutes + 2 )
schedule$time = formatTime( times )
schedule = rbind(
data.frame( who = "-", title = "Lunch / setup", type = "-", time = "12:00 - 12:20" ),
schedule,
data.frame( who = "-", title = "Wrap-up", type = "-", time = "13:15 - 13:30" )
)
return( schedule )
}
We're set! Let's run it:
```R
schedule = hmm$initialise( talks, initialProbs ); print( schedule ) ;
while( nrow( schedule ) < nrow( talks )) {
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
}
print( formatSchedule( schedule ))
```
View(schedule)
View(formatSchedule(schedule)
)
View(schedule)
schedule = hmm$initialise( talks, initialProbs ); print( schedule ) ;
while( nrow( schedule ) < nrow( talks )) {
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
}
View( formatSchedule( schedule ))
schedule = null
rm(schedule)
schedule = hmm$initialise( talks, initialProbs ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
nrow(schedule)
print( formatSchedule( schedule ))
talks
schedule = hmm$initialise( talks, initialProbs ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
schedule = hmm$step( talks, schedule, transitions ); print( schedule ) ;
library(tidyverse)
setwd("~/Projects/Teaching/GMS/statistics-course/Genes/practicals/Genes across species")
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff" )
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff", selim = "\t" )
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff", delim = "\t" )
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff", delim = "\t", comment = '#' )
X[1,]
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff", delim = "\t", comment = '#', col_names = FALSE )
X[1,]
a =X[1,9]
strsplit(a,";")
a
a = as.character(a)
a = X[1,9]
a
str(a)
a = X[1,9].data
a = X[1,9]
parse_attributes <- function( attributes ) {
elements = strsplit( attributes, ";" )[[1]]
return( elements )
}
map(a,parse_attributes)
map(a,parse_attributes)[[1]]
map(X[,9],parse_attributes)
X
map(X[,9],parse_attributes)
parse_attributes <- function( attributes ) {
elements = strsplit( attributes, ";" )
return( elements )
}
map(X[,9],parse_attributes)
map(X[,9],parse_attributes)
str(X[,9])
dim(X)
str(X$attributes)
colnames(X)[9] = "attributes"
str(X$attributes)
apply( X[,9], parse_attributes )
str(X[,9])
str(X$attributes)
map( str(X$attributes), parse_attributes)
map( str(X$attributes), parse_attributes)[1]
map( str(X$attributes), parse_attributes)[[1]]
map( str(X$attributes), parse_attributes)[[2]]
map( str(X$attributes), parse_attributes)[2]
map( str(X$attributes), parse_attributes)[3]
map( X$attributes, parse_attributes)
map( X$attributes, parse_attributes)[[1]]
parse_attributes <- function( attributes ) {
elements = strsplit( attributes, ";" )[[1]]
return( elements )
}
map( X$attributes, parse_attributes)[[1]]
map( X$attributes, parse_attributes)[[1]][1]
parse_attributes <- function( attributes ) {
elements = strsplit( attributes, ";" )[[1]]
result = list()
for( elt in elements ) {
parts = strsplit( elt, "=" )[[1]]
result[[parts[1]]] = parts[[2]]
}
return( result )
}
map( X$attributes, parse_attributes)[[1]]
map( X$attributes, parse_attributes)[[1]]$ID
map( X$attributes, parse_attributes)[[1]]$ID
X[9]
map( X[9], parse_attributes )
map( X[[9], parse_attributes )
map( X[[9]], parse_attributes )
as.tibble( map( X[[9]], parse_attributes ) )
as.tibble( t(map( X[[9]], parse_attributes ) ))
map( X[[9]], parse_attributes )
map( rowwise(X[[9]]), parse_attributes )
map( X[[9]] %>% rowwise, parse_attributes )
map( X[9] %>% rowwise(), parse_attributes )
X[9]
X[9] %>% rowwise()
map_dfr( X[9], parse_attributes )
map_dfr( X$attributes, parse_attributes )
map( X$attributes, parse_attributes )
map_dfr( X$attributes, parse_attributes )
gsub(
X$attributes,
"ID=([^;]_+);?",
"\1"
)
gsub(
"ID=([^;]_+);?",
X$attributes,
"\1"
)
gsub(
"ID=([^;]_+);?",
X$attributes,
"\1"
)
X$attributes
?gsub
gsub(
"ID=([^;]_+);?",
"\1",
X$attributes
)
gsub(
"ID=([^;]+);?",
"\1",
X$attributes
)
gsub(
"ID=([^;]+);?",
"$1",
X$attributes
)
gsub(
"ID=([^;]+);?",
"\1",
X$attributes,
fixed = FALSE
)
gsub(
"ID=([^;]+);?",
"\\1",
X$attributes,
fixed = FALSE
)
gsub(
"ID=([^;]+);?",
"\1",
X$attributes,
fixed = FALSE
)
gsub(
"ID=\([^;]+\);?",
"\1",
X$attributes,
fixed = FALSE
)
gsub(
"ID=([^;]+);?",
"\1",
X$attributes,
fixed = FALSE
)
grep(
"ID=([^;]+);?",
X$attributes,
value = TRUE
)
library(tidyverse)
getwd()
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff" )
?read_delim
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff", delim = "\t" )
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff", delim = "\t", comment = '#' )
X
View(X)
map( X[['attributs']], parse_attributes )
map( X[['attributes']], parse_attributes )
X[['attributes']]
X
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff", delim = "\t", comment = '#' )
X = read_delim( "PlasmoDB-54_Pfalciparum3D7.head.gff", delim = "\t", comment = '#', col_names = FALSE )
