"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[7422],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=m(n),f=o,u=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return n?a.createElement(u,r(r({ref:t},c),{},{components:n})):a.createElement(u,r({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var m=2;m<i;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2605:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return d}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],s={},l="Getting started with genomic data",m={unversionedId:"programming/genomic_data/Getting_started_with_genomic_data",id:"programming/genomic_data/Getting_started_with_genomic_data",title:"Getting started with genomic data",description:"Authors: Ben Wright, Wojciech Lason Bioinformatics Core",source:"@site/docs/programming/genomic_data/Getting_started_with_genomic_data.md",sourceDirName:"programming/genomic_data",slug:"/programming/genomic_data/Getting_started_with_genomic_data",permalink:"/whg-training-resources/programming/genomic_data/Getting_started_with_genomic_data",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/docs/programming/genomic_data/Getting_started_with_genomic_data.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"contributors",permalink:"/whg-training-resources/contributors"},next:{title:"Introduction to R",permalink:"/whg-training-resources/programming/introduction_to_R/"}},c={},d=[{value:"Text formats",id:"text-formats",level:2},{value:"Binary formats",id:"binary-formats",level:2},{value:"Compression",id:"compression",level:2},{value:"Index files",id:"index-files",level:3},{value:"File headers",id:"file-headers",level:2},{value:"Versioning",id:"versioning",level:2},{value:"BED format",id:"bed-format",level:2},{value:"BED example",id:"bed-example",level:3},{value:"GFF3 format",id:"gff3-format",level:2},{value:"GFF3 example",id:"gff3-example",level:3},{value:"FASTA format",id:"fasta-format",level:2},{value:"FASTA example",id:"fasta-example",level:3},{value:"FASTQ format",id:"fastq-format",level:2},{value:"FASTQ example",id:"fastq-example",level:3},{value:"SAM format",id:"sam-format",level:2},{value:"SAM example",id:"sam-example",level:3},{value:"BAM and CRAM formats",id:"bam-and-cram-formats",level:3},{value:"VCF format",id:"vcf-format",level:2},{value:"VCF example",id:"vcf-example",level:3},{value:"BCF format",id:"bcf-format",level:3},{value:"Bedtools",id:"bedtools",level:2},{value:"Samtools",id:"samtools",level:2},{value:"Bamtools",id:"bamtools",level:2},{value:"Vcftools",id:"vcftools",level:2},{value:"Bcftools",id:"bcftools",level:2},{value:"Bgzip and tabix",id:"bgzip-and-tabix",level:2},{value:"(IGV) Integrated Genome Viewer",id:"igv-integrated-genome-viewer",level:2},{value:"IGV screenshot",id:"igv-screenshot",level:3}],p={toc:d};function f(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started-with-genomic-data"},"Getting started with genomic data"),(0,i.kt)("p",null,"Authors: Ben Wright, Wojciech Lason Bioinformatics Core"),(0,i.kt)("h1",{id:"session-aims"},"Session aims"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Introduce common file formats and their uses"),(0,i.kt)("li",{parentName:"ul"},"Introduce command line tools to work with those files"),(0,i.kt)("li",{parentName:"ul"},"Put bash and R skills to use filtering variant data")),(0,i.kt)("p",null,"The intention is not to teach the specifics of every format and every\ntool, but to make you",(0,i.kt)("br",{parentName:"p"}),"\n","familiar with the landscape of bioinfoamtics tools and data so if you\nneed to solve a specific problem in the course of research you have an\nidea of where to start."),(0,i.kt)("h2",{id:"text-formats"},"Text formats"),(0,i.kt)("p",null,"Many data files used in genomics are in 'plain text' format. They are\nordinary text with spaces or tabs used to separate columns. The latter\nis often referred to as ",(0,i.kt)("inlineCode",{parentName:"p"},".tsv")," format, although it's seldom encountered\nwith that actual file suffix. The advantage to plain text is that you\ncan read it on the command line or load it into a spreadsheet programme\neasily. The downside is that this is not generally an efficient storage\nformat and leads to large file sizes. It's not at all uncommon to work\nwith text files so large that common text editors struggle to open them,\neven on modern computers."),(0,i.kt)("p",null,"While it's entirely possible to manipulate these files using the\nstandard command line tools like ",(0,i.kt)("inlineCode",{parentName:"p"},"cut")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"awk"),", you probably don't\nactually want to do that if you can help it. There are better tools\navailable, designed to work with specific types of file."),(0,i.kt)("h2",{id:"binary-formats"},"Binary formats"),(0,i.kt)("p",null,"Many text formats have an equivalent 'binary' format. This holds the\nsame data, but not in plain text you can read in a terminal or editor.\nBinary formats are more efficient storage, but require specific tools to\nread and work with. These tools always have a function to convert back\ninto plain text format so you can inspect the data."),(0,i.kt)("h2",{id:"compression"},"Compression"),(0,i.kt)("p",null,"For large files, it's common to work with a compressed version of the\nfile. This doesn't just help reduce the space needed to store the files.\nOn modern computers, reading a compressed file from disk and\ndecompressing it is faster than reading the same uncompressed data from\ndisk (almost always). On the command line, you usually can't work with\ncompressed files directly, even compressed text files. You need to\ndecompress the file using a suitable tool then use pipes (",(0,i.kt)("inlineCode",{parentName:"p"},"|"),") to the\ncommand you wanted. If you want to save a compressed version of a file,\nyou need to pipe the output to a command that compresses the data before\nsending it to a file."),(0,i.kt)("p",null,"You have probably encountered the common '.zip' compression format\nbefore. This format, and other compressed formats like it, have a\ndrawback when it comes to working with genomic data: you have to\ndecompress the entire file even when you only want a small part of it.\nWhen genomic data is compressed, it is often done using a 'block\ncompression' algorithm. What block compression does is slice the data up\ninto blocks and compress each block separately, before saving them in\nthe same file. Therefore, you only need to decompress the block that\nholds the data you are interested in. This makes accessing random parts\nof a large, compressed file much more efficient."),(0,i.kt)("h3",{id:"index-files"},"Index files"),(0,i.kt)("p",null,"Command line tools still need information about where they need to look\nin block compressed formats. It's very common for compressed genomic\ndata to be accompanied by a separate 'index' file. This index file is\ngenerated from the main compressed file, and just contains information\non what is stored in each block. It's this index that lets a tool know\nwhere in the block compressed file it needs to look. In genomic data,\nwhich usually has some positional information in terms of chromosomal\nposition, this is very convenient."),(0,i.kt)("p",null,"You commonly need to run a separate command to create an index after you\nhave created a compressed file."),(0,i.kt)("h2",{id:"file-headers"},"File headers"),(0,i.kt)("p",null,"Depending on the format, these files may or may not have a header row\nthat names the columns. Where they do not, this is because the columns,\nand their order, are defined precisely in the format specification."),(0,i.kt)("p",null,"It is also common for these files to have a header section before the\ntable itself. This is used to store meta-data about the rest of the\nfile. This ",(0,i.kt)("em",{parentName:"p"},"could")," be kept in a separate file, but that makes it too\neasy for the two files to become separated. Many tools use information\nin this header to make sure they are interpreting the data correctly."),(0,i.kt)("p",null,"As these headers are at the start of the file, it is simple to view them\nfrom the command line, allowing you to check this metadata for yourself\nto make sure it is what's expected."),(0,i.kt)("h2",{id:"versioning"},"Versioning"),(0,i.kt)("p",null,"Many data files will be created with reference to a specific build of\nthe reference genome for an organism. It's vital to avoid mixing up\nthese versions between different steps of data processing. Even if the\norganism is the same, and the sequence very similar, the positions of\nfeatures such as genes can vary considerably and this can be a source of\nerrors."),(0,i.kt)("h1",{id:"common-genomics-file-formats"},"Common genomics file formats"),(0,i.kt)("p",null,"It's not expected that you have all the details of file formats\ncommitted to memory. It ",(0,i.kt)("em",{parentName:"p"},"is")," useful to be able to recognise most common\nones and know where to look to find the detailed information you might\nneed."),(0,i.kt)("p",null,"Fuller descriptions of these formats can be found\n",(0,i.kt)("a",{parentName:"p",href:"https://learn.gencore.bio.nyu.edu/ngs-file-formats/"},"here"),"."),(0,i.kt)("h2",{id:"bed-format"},"BED format"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://genome.ucsc.edu/FAQ/FAQformat.html#format1"},"BED format\ndefinition")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suffix: ",(0,i.kt)("inlineCode",{parentName:"li"},".bed")),(0,i.kt)("li",{parentName:"ul"},"Header: none"),(0,i.kt)("li",{parentName:"ul"},"Uses: defining regions of interest (such as targetted sequencing\nkits), output from feature detection algorithms"),(0,i.kt)("li",{parentName:"ul"},"Acquired from: downloads of sequencing kit targets, databases of\ngenomic features")),(0,i.kt)("p",null,"This format defines genomic regions as simply as possible. Chromosome\nidentifer (or equivalent), start position and end position. It can\noptionally have extra columns with additional information about those\nregions, such as strand or defining sub-features."),(0,i.kt)("h3",{id:"bed-example"},"BED example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"chr7    127471196  127472363  Pos1  0  +  127471196  127472363  255,0,0\nchr7    127472363  127473530  Pos2  0  +  127472363  127473530  255,0,0\nchr7    127473530  127474697  Pos3  0  +  127473530  127474697  255,0,0\nchr7    127474697  127475864  Pos4  0  +  127474697  127475864  255,0,0\nchr7    127475864  127477031  Neg1  0  -  127475864  127477031  0,0,255\nchr7    127477031  127478198  Neg2  0  -  127477031  127478198  0,0,255\nchr7    127478198  127479365  Neg3  0  -  127478198  127479365  0,0,255\nchr7    127479365  127480532  Pos5  0  +  127479365  127480532  255,0,0\nchr7    127480532  127481699  Neg4  0  -  127480532  127481699  0,0,255\n")),(0,i.kt)("h2",{id:"gff3-format"},"GFF3 format"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md"},"GFF3 format\ndefinition")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suffix: ",(0,i.kt)("inlineCode",{parentName:"li"},".gff3"),", ",(0,i.kt)("inlineCode",{parentName:"li"},".gff")," or ",(0,i.kt)("inlineCode",{parentName:"li"},".gtf")),(0,i.kt)("li",{parentName:"ul"},"Header: ",(0,i.kt)("inlineCode",{parentName:"li"},"##")," comments providing context for the file such as version\nnumbers and region identifiers"),(0,i.kt)("li",{parentName:"ul"},"Uses: defining genomic features such as genes and exons"),(0,i.kt)("li",{parentName:"ul"},"Acquired from: downloads of gene/exon/feature definitions")),(0,i.kt)("p",null,"This set of related formats also defines genomic regions, like ",(0,i.kt)("inlineCode",{parentName:"p"},".bed"),"\nformat, but has additional required columns with information regarding\nfeature type, strand and phase."),(0,i.kt)("h3",{id:"gff3-example"},"GFF3 example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"##gff-version 3.1.26\n##sequence-region ctg123 1 1497228\nctg123 . gene            1000  9000  .  +  .  ID=gene00001;Name=EDEN\nctg123 . TF_binding_site 1000  1012  .  +  .  ID=tfbs00001;Parent=gene00001\nctg123 . mRNA            1050  9000  .  +  .  ID=mRNA00001;Parent=gene00001;Name=EDEN.1\nctg123 . mRNA            1050  9000  .  +  .  ID=mRNA00002;Parent=gene00001;Name=EDEN.2\nctg123 . mRNA            1300  9000  .  +  .  ID=mRNA00003;Parent=gene00001;Name=EDEN.3\nctg123 . exon            1300  1500  .  +  .  ID=exon00001;Parent=mRNA00003\nctg123 . exon            1050  1500  .  +  .  ID=exon00002;Parent=mRNA00001,mRNA00002\nctg123 . exon            3000  3902  .  +  .  ID=exon00003;Parent=mRNA00001,mRNA00003\nctg123 . exon            5000  5500  .  +  .  ID=exon00004;Parent=mRNA00001,mRNA00002,mRNA00003\nctg123 . exon            7000  9000  .  +  .  ID=exon00005;Parent=mRNA00001,mRNA00002,mRNA00003\nctg123 . CDS             1201  1500  .  +  0  ID=cds00001;Parent=mRNA00001;Name=edenprotein.1\nctg123 . CDS             3000  3902  .  +  0  ID=cds00001;Parent=mRNA00001;Name=edenprotein.1\nctg123 . CDS             5000  5500  .  +  0  ID=cds00001;Parent=mRNA00001;Name=edenprotein.1\nctg123 . CDS             7000  7600  .  +  0  ID=cds00001;Parent=mRNA00001;Name=edenprotein.1\nctg123 . CDS             1201  1500  .  +  0  ID=cds00002;Parent=mRNA00002;Name=edenprotein.2\nctg123 . CDS             5000  5500  .  +  0  ID=cds00002;Parent=mRNA00002;Name=edenprotein.2\nctg123 . CDS             7000  7600  .  +  0  ID=cds00002;Parent=mRNA00002;Name=edenprotein.2\nctg123 . CDS             3301  3902  .  +  0  ID=cds00003;Parent=mRNA00003;Name=edenprotein.3\nctg123 . CDS             5000  5500  .  +  1  ID=cds00003;Parent=mRNA00003;Name=edenprotein.3\nctg123 . CDS             7000  7600  .  +  1  ID=cds00003;Parent=mRNA00003;Name=edenprotein.3\nctg123 . CDS             3391  3902  .  +  0  ID=cds00004;Parent=mRNA00003;Name=edenprotein.4\nctg123 . CDS             5000  5500  .  +  1  ID=cds00004;Parent=mRNA00003;Name=edenprotein.4\nctg123 . CDS             7000  7600  .  +  1  ID=cds00004;Parent=mRNA00003;Name=edenprotein.4\n")),(0,i.kt)("h2",{id:"fasta-format"},"FASTA format"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&PAGE_TYPE=BlastDocs&DOC_TYPE=BlastHelp"},"FASTA format\ndefinition")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suffix: ",(0,i.kt)("inlineCode",{parentName:"li"},".fasta")," or ",(0,i.kt)("inlineCode",{parentName:"li"},".fa")),(0,i.kt)("li",{parentName:"ul"},"Header: none"),(0,i.kt)("li",{parentName:"ul"},"Uses: reference genomes for specific organisms, spike-in proteins\nand so on"),(0,i.kt)("li",{parentName:"ul"},"Acquired from: on-line repositories of reference genomes, Sanger\nsequencing")),(0,i.kt)("p",null,"Rather than a table, a FASTA file is a series of lines of data. This\ndata can be nucleic acid codes but sometimes amino acid codes. Each\nsequence has an identifier and can run to several lines."),(0,i.kt)("h3",{id:"fasta-example"},"FASTA example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},">sequence A\nggtaagtcctctagtacaaacacccccaatattgtgatataattaaaattatattcatat\ntctgttgccagaaaaaacacttttaggctatattagagccatcttctttgaagcgttgtc\n>sequence B\nggtaagtgctctagtacaaacacccccaatattgtgatataattaaaattatattcatat\ntctgttgccagattttacacttttaggctatattagagccatcttctttgaagcgttgtc\ntatgcatcgatcgacgactg\n")),(0,i.kt)("h2",{id:"fastq-format"},"FASTQ format"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://maq.sourceforge.net/fastq.shtml"},"FASTQ format definition")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suffix: ",(0,i.kt)("inlineCode",{parentName:"li"},".fastq")),(0,i.kt)("li",{parentName:"ul"},"Header: none"),(0,i.kt)("li",{parentName:"ul"},"Uses: inputs for mapping and other tools, deposition in on-line\nbiodata repositories, for a single sample"),(0,i.kt)("li",{parentName:"ul"},"Acquired from: sequencing services or machines directly")),(0,i.kt)("p",null,"A FASTQ file contains a series of lines of data, similar to the FASTA\nformat. Each sequence fragment has nucleic acid codes, annotated with\nquality scores, and an identifier for that fragment. FASTQ files are\nusually stored compressed (",(0,i.kt)("inlineCode",{parentName:"p"},".fastq.gz"),")."),(0,i.kt)("h3",{id:"fastq-example"},"FASTQ example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@EAS54_6_R1_2_1_413_324\nCCCTTCTTGTCTTCAGCGTTTCTCC\n+\n;;3;;;;;;;;;;;;7;;;;;;;88\n@EAS54_6_R1_2_1_540_792\nTTGGCAGGCCAAGGCCGATGGATCA\n+\n;;;;;;;;;;;7;;;;;-;;;3;83\n@EAS54_6_R1_2_1_443_348\nGTTGCTTCTGGCGTGGGTGGGGGGG\n+EAS54_6_R1_2_1_443_348\n;;;;;;;;;;;9;7;;.7;393333\n")),(0,i.kt)("h2",{id:"sam-format"},"SAM format"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://samtools.github.io/hts-specs/SAMv1.pdf"},"SAM format definition")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suffic: ",(0,i.kt)("inlineCode",{parentName:"li"},".sam")),(0,i.kt)("li",{parentName:"ul"},"Header: ",(0,i.kt)("inlineCode",{parentName:"li"},"@")," lines contain extensive information about the data\nfields in the main file, the tools and files used to generate them"),(0,i.kt)("li",{parentName:"ul"},"Uses: input to variant callers, output from alignment tools,\narchival for sequencing projects where space is not an issue"),(0,i.kt)("li",{parentName:"ul"},"Acquired from: alignment tools")),(0,i.kt)("p",null,"This format contains all of the information in a FASTQ file, but also\ncontains information as to where in the genome the sequence fragments\nmap to, how well they map there, and how they differ from the reference\nfor that region."),(0,i.kt)("p",null,"It is possible to reconstruct a FASTQ file from a SAM file."),(0,i.kt)("h3",{id:"sam-example"},"SAM example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"@HD VN:1.6 SO:coordinate\n@SQ SN:ref LN:45\nr001 99 ref 7 30 8M2I4M1D3M = 37 39 TTAGATAAAGGATACTG *\nr002 0 ref 9 30 3S6M1P1I4M * 0 0 AAAAGATAAGGATA *\nr003 0 ref 9 30 5S6M * 0 0 GCCTAAGCTAA * SA:Z:ref,29,-,6H5M,17,0;\nr004 0 ref 16 30 6M14N5M * 0 0 ATAGCTTCAGC *\nr003 2064 ref 29 17 6H5M * 0 0 TAGGC * SA:Z:ref,9,+,5S6M,30,1;\nr001 147 ref 37 30 9M = 7 -39 CAGCGGCAT * NM:i:1\n")),(0,i.kt)("h3",{id:"bam-and-cram-formats"},"BAM and CRAM formats"),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},".bam")," file is the binary equivalent of a ",(0,i.kt)("inlineCode",{parentName:"p"},".sam")," file, for much more\nefficient storage. This is important because ",(0,i.kt)("inlineCode",{parentName:"p"},".bam")," files are generally\nthe largest working files you will encounter (and their ",(0,i.kt)("inlineCode",{parentName:"p"},".sam"),"\nequivalents would often be unworkably so)."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},".cram")," file is similar, but uses a more finely-tuned compression\nalgorithm to be even more efficient. It hasn't yet achieved the same\nlevel of adoption as the BAM format, and you should check that the tools\nyou intend to use support it."),(0,i.kt)("h2",{id:"vcf-format"},"VCF format"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://samtools.github.io/hts-specs/VCFv4.3.pdf"},"VCF format\ndefinition")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suffix: ",(0,i.kt)("inlineCode",{parentName:"li"},".vcf")),(0,i.kt)("li",{parentName:"ul"},"Header: ",(0,i.kt)("inlineCode",{parentName:"li"},"##")," lines contain information about the sample, how the\nsequence was generated, and information about the content of columns\nin the file. The ",(0,i.kt)("inlineCode",{parentName:"li"},"#")," line is the header for the table."),(0,i.kt)("li",{parentName:"ul"},"Uses: showing variants for a sample or comparing variants between\nsamples"),(0,i.kt)("li",{parentName:"ul"},"Acquired from: the output of a variant calling pipeline, downloads\nfrom variant databases")),(0,i.kt)("p",null,"A format for storing variant information such as single nucleotide\nvariants, short insertions and deletions, and other sequence variations,\nfor one or more samples. It only stores differences in a particular\nsample from the supplied reference, and hence is smaller than full\nsequence data. It has 8 columns containing information about the\nvariants, then 1 or more columns showing genotypes, 1 column per sample."),(0,i.kt)("h3",{id:"vcf-example"},"VCF example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'##fileformat=VCFv4.3\n##fileDate=20090805\n##source=myImputationProgramV3.1\n##reference=file:///seq/references/1000GenomesPilot-NCBI36.fasta\n##contig=<ID=20,length=62435964,assembly=B36,md5=f126cdf8a6e0c7f379d618ff66beb2da,species="Homo sapiens",taxonomy=x>\n##phasing=partial\n##INFO=<ID=NS,Number=1,Type=Integer,Description="Number of Samples With Data">\n##INFO=<ID=DP,Number=1,Type=Integer,Description="Total Depth">\n##INFO=<ID=AF,Number=A,Type=Float,Description="Allele Frequency">\n##INFO=<ID=AA,Number=1,Type=String,Description="Ancestral Allele">\n##INFO=<ID=DB,Number=0,Type=Flag,Description="dbSNP membership, build 129">\n##INFO=<ID=H2,Number=0,Type=Flag,Description="HapMap2 membership">\n##FILTER=<ID=q10,Description="Quality below 10">\n##FILTER=<ID=s50,Description="Less than 50% of samples have data">\n##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">\n##FORMAT=<ID=GQ,Number=1,Type=Integer,Description="Genotype Quality">\n##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Read Depth">\n##FORMAT=<ID=HQ,Number=2,Type=Integer,Description="Haplotype Quality">\n#CHROM POS ID REF ALT QUAL FILTER INFO FORMAT NA00001 NA00002 NA00003\n20 14370 rs6054257 G A 29 PASS NS=3;DP=14;AF=0.5;DB;H2 GT:GQ:DP:HQ 0|0:48:1:51,51 1|0:48:8:51,51 1/1:43:5:.,.\n20 17330 . T A 3 q10 NS=3;DP=11;AF=0.017 GT:GQ:DP:HQ 0|0:49:3:58,50 0|1:3:5:65,3 0/0:41:3\n20 1110696 rs6040355 A G,T 67 PASS NS=2;DP=10;AF=0.333,0.667;AA=T;DB GT:GQ:DP:HQ 1|2:21:6:23,27 2|1:2:0:18,2 2/2:35:4\n20 1230237 . T . 47 PASS NS=3;DP=13;AA=T GT:GQ:DP:HQ 0|0:54:7:56,60 0|0:48:4:51,51 0/0:61:2\n20 1234567 microsat1 GTC G,GTCT 50 PASS NS=3;DP=9;AA=G GT:GQ:DP 0/1:35:4 0/2:17:2 1/1:40:3\n')),(0,i.kt)("h3",{id:"bcf-format"},"BCF format"),(0,i.kt)("p",null,"There is a binary equivalent of VCF, with the same data in a more\ncompact format."),(0,i.kt)("h1",{id:"common-tools"},"Common tools"),(0,i.kt)("p",null,"These formats were usually developed by a team working on a\nbioinformatics tool with a need for a consistent input or output format.\nThere a lot of these formats are closely associated with the original\ntool, although most have been adopted as common standards for other\ntools working with the same kind of data."),(0,i.kt)("p",null,"Unfortunately, although the formats are consistent, the tools themselves\nare not with respect to the syntax required to get them to do what you\nwant. Although they are fully documented, ensuring you are suing them\ncorrectly is not a simple task. This is one reason why it's common to\nre-use a bioinformatics pipeline that's known to work correctly, rather\nthan trying to create a new, bespoke solution for each project."),(0,i.kt)("p",null,"For many tasks there are more than one tool you can use; which you use\nshould be guided by familiarity with the tool and how easy it is to set\nit up and run it. Computing time is cheap. Analyst time is expensive."),(0,i.kt)("h2",{id:"bedtools"},"Bedtools"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://bedtools.readthedocs.io/en/latest/"},"bedtools documentation")),(0,i.kt)("p",null,"Bedtools is designed to summarise overlaps between genomic regions, or\ndifferences between genomic regions. It was designed around the ",(0,i.kt)("inlineCode",{parentName:"p"},".bed"),"\nformat, but can also work with ",(0,i.kt)("inlineCode",{parentName:"p"},".gff"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".bam")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".vcf")," formats."),(0,i.kt)("h2",{id:"samtools"},"Samtools"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://www.htslib.org/doc/samtools.html"},"samtools documentation")),(0,i.kt)("p",null,"Samtools is a Swiss army knife tool for working with ",(0,i.kt)("inlineCode",{parentName:"p"},".sam"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".bam"),", and\n",(0,i.kt)("inlineCode",{parentName:"p"},".cram")," files. It allows you to view regions of the file, convert it to\nother formats, manipulate and filter by metadata for reads, produce\nsummary statistics about sequencing depth and more, and it even has a\nprimitive genotype caller built-in."),(0,i.kt)("p",null,"Many of its functions require its input files to be indexed, and\nsamtools itself has a mode to index those files."),(0,i.kt)("h2",{id:"bamtools"},"Bamtools"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://hcc.unl.edu/docs/applications/app_specific/bioinformatics_tools/data_manipulation_tools/bamtools/"},"bamtools\ndocumentation")),(0,i.kt)("p",null,"Bamtools operates solely on ",(0,i.kt)("inlineCode",{parentName:"p"},".bam")," files. Whereas samtools includes\nfeatures useful for an analyst, bamtools is more concerned with\nmanipulating the files themselves, to merge, filter or convert."),(0,i.kt)("p",null,"Bamtools also has a function to index ",(0,i.kt)("inlineCode",{parentName:"p"},".bam")," files."),(0,i.kt)("h2",{id:"vcftools"},"Vcftools"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://vcftools.github.io/index.html"},"vcftools documentation")),(0,i.kt)("p",null,"Vcftools, predictably, manipulates ",(0,i.kt)("inlineCode",{parentName:"p"},".vcf")," files. It can be used to\nfilter variants, compare variants between files, summarise variants and\nhandle file conversion, validation and merging."),(0,i.kt)("h2",{id:"bcftools"},"Bcftools"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://www.htslib.org/doc/bcftools.html"},"bcftools documentation")),(0,i.kt)("p",null,"Bcftools works on both ",(0,i.kt)("inlineCode",{parentName:"p"},".bcf")," and ",(0,i.kt)("inlineCode",{parentName:"p"},".vcf")," files, and does many of the\nsame tasks as vcftools."),(0,i.kt)("h2",{id:"bgzip-and-tabix"},"Bgzip and tabix"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://www.htslib.org/doc/bgzip.html"},"bgzip documentation")," ",(0,i.kt)("a",{parentName:"p",href:"http://www.htslib.org/doc/tabix.html"},"tabix\ndocumentation")),(0,i.kt)("p",null,"These tools are designed to be used together. bgzip is a blocked\nimplementation of the widely-used gzip compression, and tabix is a tool\nfor indexing those compressed files."),(0,i.kt)("h2",{id:"igv-integrated-genome-viewer"},"(IGV) Integrated Genome Viewer"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://software.broadinstitute.org/software/igv/"},"IGV homepage")),(0,i.kt)("p",null,"IGV is a useful tool for visualising data files. It can load a variety\nof formats including ",(0,i.kt)("inlineCode",{parentName:"p"},".bed"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".gff"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".fasta"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".sam"),", ",(0,i.kt)("inlineCode",{parentName:"p"},".bam")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},".vcf"),". It's invaluable for looking at different files side-by-side,\ncomparing samples or cross-referencing data and feature definitions."),(0,i.kt)("h3",{id:"igv-screenshot"},"IGV screenshot"),(0,i.kt)("h1",{id:"break"},"Break"),(0,i.kt)("h1",{id:"practical"},"Practical"))}f.isMDXComponent=!0}}]);