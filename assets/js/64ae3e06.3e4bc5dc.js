"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[5906],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=d(n),p=o,m=h["".concat(l,".").concat(p)]||h[p]||u[p]||i;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8024:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],s={},l="R: Introduction to Basic Features",d={unversionedId:"programming/introduction_to_R/R_introduction_to_Basic_Features",id:"programming/introduction_to_R/R_introduction_to_Basic_Features",title:"R: Introduction to Basic Features",description:"Authors: Helen Lockstone, Matthieu Miossec, Ben Wright Bioinformatics",source:"@site/docs/programming/introduction_to_R/R_introduction_to_Basic_Features.md",sourceDirName:"programming/introduction_to_R",slug:"/programming/introduction_to_R/R_introduction_to_Basic_Features",permalink:"/whg-training-resources/programming/introduction_to_R/R_introduction_to_Basic_Features",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/docs/programming/introduction_to_R/R_introduction_to_Basic_Features.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introduction to R",permalink:"/whg-training-resources/programming/introduction_to_R/"},next:{title:"Programming with gene annotations",permalink:"/whg-training-resources/programming/programming_with_gene_annotations/"}},c={},u=[{value:"Installing R and RStudio",id:"installing-r-and-rstudio",level:2},{value:"R: what is it?",id:"r-what-is-it",level:2},{value:"R: strengths and weaknesses",id:"r-strengths-and-weaknesses",level:2},{value:"R fundamentals",id:"r-fundamentals",level:2},{value:"Getting started with RStudio",id:"getting-started-with-rstudio",level:2},{value:"RStudio screenshot",id:"rstudio-screenshot",level:3},{value:"Bottom left",id:"bottom-left",level:3},{value:"Top left",id:"top-left",level:3},{value:"Top right",id:"top-right",level:3},{value:"Bottom right",id:"bottom-right",level:3},{value:"Working with the R console",id:"working-with-the-r-console",level:2},{value:"R command syntax",id:"r-command-syntax",level:2},{value:"R Objects",id:"r-objects",level:2},{value:"Using functions",id:"using-functions",level:2},{value:"Vectors",id:"vectors",level:2},{value:"Accessing elements of a vector",id:"accessing-elements-of-a-vector",level:2},{value:"Functions and packages",id:"functions-and-packages",level:2},{value:"Working directory",id:"working-directory",level:2},{value:"Removing objects",id:"removing-objects",level:2},{value:"Setup",id:"setup",level:2},{value:"Helpful Tips",id:"helpful-tips",level:2},{value:"Reading in data from a file",id:"reading-in-data-from-a-file",level:2},{value:"Two-dimensional data structures",id:"two-dimensional-data-structures",level:2},{value:"Accessing data",id:"accessing-data",level:2},{value:"Analysing data",id:"analysing-data",level:2},{value:"Plotting data",id:"plotting-data",level:2},{value:"Handling data with factors",id:"handling-data-with-factors",level:2},{value:"Putting it together",id:"putting-it-together",level:2},{value:"Bioconductor",id:"bioconductor",level:2}],h={toc:u};function p(e){var t=e.components,s=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"r-introduction-to-basic-features"},"R: Introduction to Basic Features"),(0,i.kt)("p",null,"Authors: Helen Lockstone, Matthieu Miossec, Ben Wright Bioinformatics\nCore"),(0,i.kt)("h1",{id:"workshop-aims"},"Workshop aims"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To introduce the R language and environment"),(0,i.kt)("li",{parentName:"ul"},"To explain some programming jargon and concepts"),(0,i.kt)("li",{parentName:"ul"},"To use R to run some typical tasks"),(0,i.kt)("li",{parentName:"ul"},"To be aware of the vital importance of good programming habits")),(0,i.kt)("p",null,"This course is hosted at:\n",(0,i.kt)("a",{parentName:"p",href:"https://whg-training.github.io/whg-training-resources/programming/introduction_to_R/R_Introduction_to_Basic_Features.html"},"https://whg-training.github.io/whg-training-resources/programming/introduction_to_R/R_Introduction_to_Basic_Features.html"),"."),(0,i.kt)("p",null,"This course has workshop content intended to be worked through using\nRStudio. The course tutor will lead work through that content during the\nsession, but you are encouraged to work at your own pace and read ahead\nif you feel comfortable doing so."),(0,i.kt)("p",null,"The course is intended to start at the very beginning, for people with\nno previous programming experience, using R or otherwise. If you're\nfinding it at too basic a level, feel free to skip ahead or use this\ntime for something more useful to you! Some suggestions for more R\nmaterial are at the end of this document."),(0,i.kt)("h2",{id:"installing-r-and-rstudio"},"Installing R and RStudio"),(0,i.kt)("p",null,"R and RStudio are available for a variety of platforms, including\nWindows, macOS and Linux. R is open source software. R Studio is open\nsource software, supplemented by non-free add-ons."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cran.r-project.org/bin/windows/base/"},"R for Windows\ndownload")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://cran.r-project.org/bin/macosx/"},"R for macOS X")),(0,i.kt)("li",{parentName:"ul"},"R for Linux can probably be obtained through your usual package\nmanager, or else ",(0,i.kt)("a",{parentName:"li",href:"https://cran.r-project.org/bin/linux/"},"here")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.rstudio.com/products/rstudio/download/#download"},"RStudio\ndownloads"))),(0,i.kt)("p",null,"These should already be installed and ready."),(0,i.kt)("h2",{id:"r-what-is-it"},"R: what is it?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Powerful statistical computing environment and programming language"),(0,i.kt)("li",{parentName:"ul"},"Developed by Robert Gentleman and Ross Ihaka at the University of\nAuckland in mid 1990s \u2013 originally something to teach statistics\nthat would run on a Mac"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://rss.onlinelibrary.wiley.com/doi/pdf/10.1111/j.1740-9713.2018.01169.x"},"Full story of R's\ndevelopment")),(0,i.kt)("li",{parentName:"ul"},"Now widely used all around the world")),(0,i.kt)("h2",{id:"r-strengths-and-weaknesses"},"R: strengths and weaknesses"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Incredibly powerful and versatile statistical programming software\u2026\nbut where do I start?"),(0,i.kt)("li",{parentName:"ul"},"Features that make life easier in many ways\u2026 but potential pitfalls\nas well"),(0,i.kt)("li",{parentName:"ul"},"Open-source, free software with a strong support and development\ncommunity"),(0,i.kt)("li",{parentName:"ul"},"Extensive additional functionality for bioinformatics and genomic\ndata through the ",(0,i.kt)("a",{parentName:"li",href:"https://www.bioconductor.org/"},"Bioconductor\nproject")),(0,i.kt)("li",{parentName:"ul"},"Infamous for opaque error messages and help files")),(0,i.kt)("h1",{id:"getting-started-with-r"},"Getting started with R"),(0,i.kt)("p",null,"This workshop will introduce you to the R environment, with the aim of\nbecoming familiar with how commands are written and structured and how\nto perform basic tasks associated with data analysis using R."),(0,i.kt)("h2",{id:"r-fundamentals"},"R fundamentals"),(0,i.kt)("p",null,"R is, at its heart, a command line language like bash. Text commands are\nentered and text output is printed to the console. Similarly, you can\nwrite R scripts to be executed when you need them."),(0,i.kt)("p",null,"However, unlike bash, R also keeps data in its own internal store rather\nthan only keeping data in memory while the command is running. R can\nalso open new windows to display plots it has created, or show help\nfiles."),(0,i.kt)("p",null,"When you close R, it will ask you whether you want to save the\nworkspace. If you say yes, then R creates a file called '.Rdata' (which\nis a hidden file on most operating systems by default). This file\ncontains ",(0,i.kt)("em",{parentName:"p"},"all")," of the data you had stored in your R session. This makes\nis easy to pick up where you left off, but be aware that this file can\nbecome very large if you load a lot of data into R."),(0,i.kt)("h2",{id:"getting-started-with-rstudio"},"Getting started with RStudio"),(0,i.kt)("p",null,"RStudio is an integrated development environment (IDE) that wraps around\nR and makes a lot of common tasks much more convenient. Launch RStudio\nto open a new R session."),(0,i.kt)("p",null,"By default, RStudio displays 4 different panels. If there's only one\npanel on the left, then one of them is currently hidden \u2013 you can make\nit visible by opening a new R script file from the 'File' menu."),(0,i.kt)("h3",{id:"rstudio-screenshot"},"RStudio screenshot"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(1015).Z,width:"1920",height:"1080"})),(0,i.kt)("h3",{id:"bottom-left"},"Bottom left"),(0,i.kt)("p",null,"The bottom left panel is R itself, in the tab 'Console'. If you were\nrunning R without RStudio, this is exactly what you would see."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},">")," prompt is telling you that R is ready to receive new commands.\nYou can type R code here and press return to have R run that code. R\nwill print any output from that command and then show the ",(0,i.kt)("inlineCode",{parentName:"p"},">")," prompt\nagain to say it is ready for new input. Note that something may have\nhappened 'behind the scenes' \u2013 such creating or altering a data object.\nIt is important to know what each command has done and it was as\nintended."),(0,i.kt)("p",null,"Two useful things to know about this panel are that you can use the up\nand down arrows to scroll through previous commands \u2013 very useful to fix\nan error without retyping the entire line! \u2013 and you can use the tab key\nto auto-complete commands, variable names and file names."),(0,i.kt)("p",null,"The other tabs you don't need to use now."),(0,i.kt)("p",null,"Try typing a simple command into the R console (remember to press\nReturn):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"6 * 7\n")),(0,i.kt)("p",null,"You'll see that it will give you the answer. The ",(0,i.kt)("inlineCode",{parentName:"p"},"[1]")," is a little\ncryptic for now, but that will be explained later. See how it shows the\n",(0,i.kt)("inlineCode",{parentName:"p"},">")," prompt again afterwards."),(0,i.kt)("h3",{id:"top-left"},"Top left"),(0,i.kt)("p",null,"The top left panel is a simple text editor (like Notepad), intended to\nbe used to write R scripts. The editor can have multiple files open at a\ntime."),(0,i.kt)("p",null,"This text editor is integrated into RStudio and has several convenient\nfeatures. If you click on the green 'Run' button, it will copy the\ncurrent line of code into the R window and run it. If you highlight a\nportion of code, the same button will copy and run that selection. There\nis also a 'Source' button, what will copy the entire file into the R\npanel and run it."),(0,i.kt)("p",null,"Try this by typing this line into the editor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"6 * 9\n")),(0,i.kt)("p",null,"and clicking 'Run'."),(0,i.kt)("p",null,"The editor also understands some other R-related files. This includes a\n'.rmd' file. Go to the file menu and select 'Open', then navigate to and\nselect the file for this course: ",(0,i.kt)("inlineCode",{parentName:"p"},"R Introduction to Basic Features.rmd"),".\nYou'll see this entire document. The snippets of R code each have their\nown little run button (the green arrow on the right) that lets you run\nthe entire section (called a 'chunk') with one click."),(0,i.kt)("p",null,"Now you have this course open you can follow it from inside RStudio.\nFeel free to work through the material at your own pace."),(0,i.kt)("h3",{id:"top-right"},"Top right"),(0,i.kt)("p",null,"The top right panel contains information about the current R session.\nThe 'Environment' tab lists all the data objects currently stored in R.\nEach entry is an 'object', in R's terminology. The 'History' tab shows\nall the commands that the main R panel has executed so far. This is the\nsame list you can browse with the arrow keys in the R panel. The other\ntabs here you don't need to worry about."),(0,i.kt)("h3",{id:"bottom-right"},"Bottom right"),(0,i.kt)("p",null,"The bottom right panel is used to show a variety of things in a tabbed\ninterface. 'Files' allows you to browse your computer's directories.\n'Plots' displays any plots you have made using R in the current seesion.\n'Help' is where R will display its help files."),(0,i.kt)("h2",{id:"working-with-the-r-console"},"Working with the R console"),(0,i.kt)("p",null,"R is a very interactive environment; commands can be entered into the\nconsole one by one, and each is interpreted and executed by R in real\ntime. R is a high-level programming language, meaning that it is fairly\nhuman-readable."),(0,i.kt)("p",null,"If a command is not valid in the way it is constructed (its syntax), R\nwill print an error message to the screen. These can sometimes be hard\nto interpret but particularly common culprits are simple typing mistakes\nor quotes and brackets, whether they are in the wrong place, missing, or\nnot in pairs (e.g. missing a closing bracket)."),(0,i.kt)("p",null,"You can type the R commands directly, which is useful at first to get\nused to the syntax (structure) of commands. However, you can use\nRStudio's editor to copy commands into the console if you prefer. This\nway, it's easier to go back and run a command again, or change it\nslightly first."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"If you see an error message, first double check that the command is\nentered exactly as shown. If you can't find the problem, please ask for\nhelp. The advantage of copying the commands into the text editor panel\nof RStudio means that you can save the file afterwards to have a record\nof what you have done and can easily re-run again in future.")),(0,i.kt)("p",null,"To do anything useful in R, we need to use objects to hold data and\nperform various operations on them. The terms object, variable and data\nstructure can all refer generally to 'objects' created in R."),(0,i.kt)("p",null,"Although variable is a widely used programming term and would be the\npreferred term in certain situations, we use 'object' as a general term\nthroughout to refer to any of R's data structures. These include\nvectors, factors, matrices, data frames and lists. Don't worry about the\ndifferences between those things for now."),(0,i.kt)("p",null,"We will start by entering a few simple commands and discuss what is\nhappening."),(0,i.kt)("h2",{id:"r-command-syntax"},"R command syntax"),(0,i.kt)("p",null,"The following few commands give some sense of how R stores information\nin objects and how simple manipulations of data can be performed. The\n",(0,i.kt)("inlineCode",{parentName:"p"},"#")," symbol indicates a comment. We'll sometimes use them here to show\nwhat R's output is without needing to run the command."),(0,i.kt)("p",null,"The first example assigns the value 1 to a new object we create and name\n",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x <- 1\n")),(0,i.kt)("p",null,"The assignment operator is ",(0,i.kt)("inlineCode",{parentName:"p"},"<-")," and running this command creates a new\nobject named ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," in R's memory. If you look in the 'Environment' panel\nin the top right, you'll see that an entry for ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," has appeared. To\ninspect the contents of the new object in the console, we simply type\nits name:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"## Inspect the contents of the new object\nx\n## [1] 1\n")),(0,i.kt)("p",null,"Note that the contents of an object will be overwritten \u2013 without any\nwarning message \u2013 if later assigned a different value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x <- 4\n# x now contains the value 4\nx\n## [1] 4\n")),(0,i.kt)("p",null,"We can also perform operations directly on the object (note the object\nitself does not change):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x * 2\n## [1] 8\n# x still contains the value 4\nx\n## [1] 4\n\n## unless we were to re-assign the output back to the same object:\nx <- x * 2\n# x now contains the value 8\nx\n## [1] 8\n")),(0,i.kt)("p",null,"R is case sensitive so ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"X")," are different:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"X\n## An error\n")),(0,i.kt)("p",null,"Trying to run this command will produce an error message:\n",(0,i.kt)("inlineCode",{parentName:"p"},'Error: object "X" not found'),". Object names are chosen by the programmer\n\u2013 informative names are helpful for several reasons. You can use\ncapitalization, ",(0,i.kt)("inlineCode",{parentName:"p"},"_")," or ",(0,i.kt)("inlineCode",{parentName:"p"},".")," to separate parts of an object name but they\ncannot contain spaces, nor start with a number. To avoid confusion or\npotential issues, it is also best not to give them the same name as an R\nfunction, which have their own defined names. An object named\n",(0,i.kt)("inlineCode",{parentName:"p"},"raw_data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"raw.data"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"rawData")," (or even ",(0,i.kt)("inlineCode",{parentName:"p"},"d.raw")," for minimal typing!)\nis fine, but trying to assign a value to a variable named ",(0,i.kt)("inlineCode",{parentName:"p"},"raw data"),"\nwill give an error because R cannot parse it correctly."),(0,i.kt)("p",null,"Elsewhere R ignores whitespace so the following commands are equivalent:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x<-4+3\nx <- 4 + 3\n")),(0,i.kt)("p",null,"Now we will assign a set of numbers to our variable x, which R will\nstore as a vector. A vector is a series of different data values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x <- c(1, 2, 3, 4, 5)\nx\n## [1] 1 2 3 4 5\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"[1]")," part of the output is R's way of displaying vectors. The\nnumber in square brackets is the index of the first entry in the line.\nIf the output is long enough that it spans more than one line, this\nmakes it easier to work out the index of entries on that line. Note that\nin R indices start at ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," (instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," as in most other programming\nlanguages)."),(0,i.kt)("p",null,"If we forget the closing bracket before pressing enter, then R can\ndetect that the command is incomplete. It gives us a different prompt:\n",(0,i.kt)("inlineCode",{parentName:"p"},"+"),". This indicates that R is waiting for you to complete the command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x <- c(1, 2, 3, 4, 5\n## + appears as the prompt\n)\n")),(0,i.kt)("p",null,"If we can't simply continue our command, use Esc or control-C to cancel\nthe input so far and return to the ",(0,i.kt)("inlineCode",{parentName:"p"},">")," prompt and start again."),(0,i.kt)("p",null,"Rstudio and some other text editors highlight different parts of the\nsyntax in different colours and automatically close brackets and\nquotation marks to help eliminate typing mistakes."),(0,i.kt)("h2",{id:"r-objects"},"R Objects"),(0,i.kt)("p",null,"Objects can be created in many different ways and hold different kinds\nof information. Unlike other programming languages, there is no need to\ninitialise a variable or object in R (i.e. define it before first use) \u2013\nit can simply be created and used directly. R also automatically decides\nwhich of its data structures and types are most appropriate for the data\ngiven, rather than being explicitly specified by the programmer."),(0,i.kt)("p",null,"We'll work through some examples and look at ways to access or\nmanipulate the data contained within an object. Be aware that the type\n(class) of an object and data it contains (numeric, character etc) can\naffect how it is treated by R."),(0,i.kt)("p",null,"There are many shortcuts in R to avoid tedious or error-prone steps.\nWhen we created our small example vector containing the numbers 1 to 5,\nwe issued this command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x <- c(1, 2, 3, 4, 5) # the c function tells R to concatenate these 5 numbers\n## equivalently we could use this command\nx <- 1:5 # handy if we needed a much longer vector such as 1 to 100, or 1 to 100000\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},":")," symbol is special syntax that tells R to make a sequence of\nwhole numbers from one value to another. We can also put together\nnon-consecutive strings of numbers or a mixture"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x2 <- c(1, 3, 5, 7, 9)\nx3 <- c(1:5, 7, 9, 10:15)\n")),(0,i.kt)("p",null,"If we need to create a sequence of numbers, the function ",(0,i.kt)("inlineCode",{parentName:"p"},"seq")," is very\nuseful."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"seq1 <- seq(from=1, to=99, by=2)\nseq2 <- seq(from=0, to=1, by=0.01)\n")),(0,i.kt)("p",null,"You can look at all of these objects in the 'Environment' panel to see\nwhat you get when you use these commands."),(0,i.kt)("h2",{id:"using-functions"},"Using functions"),(0,i.kt)("p",null,"Functions are defined blocks of code that perform a particular task. R\nhas many hundreds of in-built functions for common tasks, and they can\nbe used by 'calling' the function by its name. Above, we used the\nfunction ",(0,i.kt)("inlineCode",{parentName:"p"},"seq"),"; the function name is followed by any arguments in\nparentheses \u2013 the arguments determine exactly what the function does and\nenable it to be useful for many situations. By changing the arguments,\nwe changed the sequence of numbers that was produced. Some arguments are\nrequired and others are optional or may have default settings defined in\nthe function. Documentation about the usage of any R function is given\nin the corresponding help page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"help(seq)\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"help")," is, itself, a function that opens up the help file for a given\nnames function. Note that the help file is opened in the lower right\npanel of RStudio.")),(0,i.kt)("h2",{id:"vectors"},"Vectors"),(0,i.kt)("p",null,"Vectors are one-dimensional objects; in the case of the object ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," we\ncreated earlier, it has length 5. There is an in-built R function called\nlength that we can use to check how long any given vector object is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"length(x)\n## [1] 5\n## If we change what is assigned to x, the length of the vector is automatically adjusted:\nx <- 1:10\nlength(x)\n## [1] 10\n")),(0,i.kt)("p",null,"Vectors are R's primary object type and many computations in R are\nhighly efficient because they operate on the whole vector at once,\nrather than element by element."),(0,i.kt)("p",null,"Vectors can contain numeric or character data (or both). We can create a\nnew vector, ",(0,i.kt)("inlineCode",{parentName:"p"},"y"),", containing the letters 'a', 'b', and 'c'."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'y <- c("a", "b", "c")\n')),(0,i.kt)("p",null,"Note how ",(0,i.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"y")," are displayed differently in the 'Environment'\npanel. We can also see how R has automatically treated them differently\nby checking the ",(0,i.kt)("inlineCode",{parentName:"p"},"class")," of the objects directly:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'class(x)\n## [1] "integer"\nclass(y)\n## [1] "character"\n')),(0,i.kt)("p",null,"Now try running the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"y <- c(a, b, c)\n## An error\n")),(0,i.kt)("p",null,"What do you think R has tried to do and why does it result in an error\nmessage?"),(0,i.kt)("h2",{id:"accessing-elements-of-a-vector"},"Accessing elements of a vector"),(0,i.kt)("p",null,"Square brackets are used to access specific elements or subsets of a\nvector, factor, matrix or data frame. Let's create a new vector as an\nexample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"x <- c(1:5, 10:14)\n## now extract 3rd element\nx[3]\n## or extract alternate elements\nx[c(1, 3, 5, 7, 9)]\n## or extract subset of elements\nx[3:6]\n")),(0,i.kt)("p",null,"The second and third examples above show how R can be powerful by\nworking with vectors. Instead of having to use square brackets to\nextract each element of the vector, and then using ",(0,i.kt)("inlineCode",{parentName:"p"},"c")," to combine them\ninto a new vector, we use a vector ",(0,i.kt)("em",{parentName:"p"},"inside")," the square brackets and R\ninterprets that as an instruction to return a vector of those elements\nof ",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"."),(0,i.kt)("p",null,"R will decide the most appropriate way to store the data it is provided\nwith, and there are ways to convert between different object structures\nand classes if needed. To give more examples of how data is interpreted\nby R, run the following and note the results (feel free to discuss this\nwith your neighbours)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'x2 <- c(1:5, 6.5)\nclass(x2)\n## [1] "numeric"\nx3 <- c(1:5, 6.5, "a", "b", "c")\nclass(x3)\n## [1] "character"\n')),(0,i.kt)("p",null,"This gives some idea of R's internal rules. Because the way data is\nbeing handled by R is important for both performing computations\ncorrectly and the source of many error messages, it is useful to be\nfamiliar with the common data types. Some functions, such as computing a\nmean for example, require numeric data objects to operate on. What\nhappens when you try to find the mean of x2 and x3?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"mean(x2)\nmean(x3)\n")),(0,i.kt)("h2",{id:"functions-and-packages"},"Functions and packages"),(0,i.kt)("p",null,"There are hundreds, probably thousands, of in-built functions in R. Some\nyou will use very often and others rarely or never. There are always\nseveral ways to do the same thing in R, using closely-related functions."),(0,i.kt)("p",null,"Examples of the functions we have used so far include ",(0,i.kt)("inlineCode",{parentName:"p"},"length"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"mean"),",\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"class"),". In the case of ",(0,i.kt)("inlineCode",{parentName:"p"},"length"),", the argument supplied is the name\nof the object we wish to find the length of. We can check the length of\nanother vector object simply by changing the argument."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"length")," function is only applicable to vectors (or factors) and\ndoes not work on other data types such as matrices or data frames, which\nare 2-dimensional. Often, data is stored in a table format (e.g. in\nExcel), and commonly handled as a 'data frame' in R. We will introduce\nthese ideas using practical exercises in the next section."),(0,i.kt)("p",null,"There are many thousands of additional functions available to R through\nsomething called 'packages'. Each package is a self-contained parcel of\nfunctions created for a specific application. For example,\n'Bioconductor' is a repository of many packages related to handling data\nin bioinformatics. Because it would be confusing to always have all\nthese functions available (and because some packages may end up using\nthe same names) you need to specifically tell R to make a package\navailable. This is done using the ",(0,i.kt)("inlineCode",{parentName:"p"},"install.packages")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"library"),"\nfunctions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'## Install the package for your R environment\ninstall.packages("ggplot2")\n## Make the package available to use\nlibrary(ggplot2)\n')),(0,i.kt)("p",null,"The first function might prompt you to choose from a list of 'mirrors',\nwhich are just different places on the internet where the packages are\nstored. It doesn't much matter which you choose, although choosing one\nclose to where you currently are is recommended."),(0,i.kt)("p",null,"Note that when installing the package, you need to treat the package\nname as character data, inside double-quotes. Once the package has been\ninstalled, R is aware the package exists and can interpret the name\nwithout quotes when you use ",(0,i.kt)("inlineCode",{parentName:"p"},"library"),". Installing packages is something\nyou only need to do once per computer (in theory, at least). You must\n",(0,i.kt)("inlineCode",{parentName:"p"},"library")," in each new R session before trying to use any functions from\nthe package; as this is what tells R to look in that package for\nfunction names (again, to try and handle duplicate names in different\npackages gracefully)."),(0,i.kt)("h2",{id:"working-directory"},"Working directory"),(0,i.kt)("p",null,"An important concept before we get started is the working directory.\nYour R session is active in one particular directory on your computer \u2013\nby default your 'home' directory, as defined by the operating system."),(0,i.kt)("p",null,"When you save an R session, the ",(0,i.kt)("inlineCode",{parentName:"p"},".RData")," file is saved there. When you\nstart a new R session in a particular directory, any ",(0,i.kt)("inlineCode",{parentName:"p"},".RData")," file is\nre-opened in that session. If is also possible to load and save these\nsession files from within RStudio."),(0,i.kt)("p",null,"It is useful to set the working directory to the place where you have\nthe files you want to work with. It means you have to do less typing to\nload the save files and you can keep the R version of the data alongside\nthe original files."),(0,i.kt)("p",null,"We need to set a working directory for the rest of the workshop. From\nRStudio's Session menu, select 'Set working directory', and then 'Choose\ndirectory...'. If you've already downloaded the files for this workshop,\nselect that directory. Otherwise, create a new directory to work in and\nselect that. You can change the working directory using the R function\n",(0,i.kt)("inlineCode",{parentName:"p"},"setwd"),", but it's more convenient to use RStudio's interface."),(0,i.kt)("p",null,"You will also need to download two data files by entering the following\ncommands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'download.file("https://queex.github.io/whg-training-resources/R-intro/inflammation_data.csv", "./inflammation_data.csv")\ndownload.file("https://queex.github.io/whg-training-resources/R-intro/sample.csv", "./sample.csv")\n')),(0,i.kt)("h2",{id:"removing-objects"},"Removing objects"),(0,i.kt)("p",null,"Sometimes you are testing things out and creating lots of objects \u2013\nthat's fine but it's always good to start a new session when running or\nchecking your final code to be sure previous objects do not affect it in\nany way. Sessions can also be cleaned up by deleting objects with the\n",(0,i.kt)("inlineCode",{parentName:"p"},"rm")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"rm(x3)\n")),(0,i.kt)("h1",{id:"break"},"Break"),(0,i.kt)("p",null,"This is an excellent time to take a short break. Stretch your legs, get\na drink."),(0,i.kt)("h1",{id:"workshop-part-2"},"Workshop part 2"),(0,i.kt)("p",null,"Earlier we introduced the R software environment, some key features of\nthe R programming language and how to start using it. We will now do\nsome practical exercises working with example data to perform typical\ntasks. First, some important acknowledgements:"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"The tutorial that follows is in part adapted from the ",(0,i.kt)("a",{parentName:"em",href:"https://software-carpentry.org/lessons/"},"Software\nCarpentry Foundation"),"\nProgramming with R, specifically the Analysing Patient Data\n",(0,i.kt)("a",{parentName:"em",href:"http://swcarpentry.github.io/r-novice-inflammation/01-starting-with-data/index.html"},"tutorial"),".\nThe Software Carpentry material is available for re-use under a\n",(0,i.kt)("a",{parentName:"em",href:"https://creativecommons.org/licenses/by/4.0/"},"Creative Commons License"),"\nand we are grateful to the original authors.")),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"We set up our R session for this practical before the break. You can\ncheck the current working directory with the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"getwd()\n")),(0,i.kt)("p",null,"The output (directory path) should match the location you are working in\ntoday, and this folder should also contain the files named\n",(0,i.kt)("inlineCode",{parentName:"p"},"inflammation_data.csv")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"sample.csv"),". If you see an error message at\nany point, first check the command matches that in the tutorial exactly\nand that you haven't accidentally missed an earlier command out. Pay\nparticular attention to lower/upper case letters, underscores, dashes or\ndots in function or object names, and that brackets and quotes are\ncorrectly paired. If you can't spot the problem or have a question at\nany point, please don't hesitate to ask!"),(0,i.kt)("h2",{id:"helpful-tips"},"Helpful Tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Enter your commands in the top-left panel of RStudio (a text editor)\nas this means they can be saved to keep a record of what you have\ndone. Use the 'Run' to check that they run and do what you expect."),(0,i.kt)("li",{parentName:"ul"},"To save your script, click on the disk icon in the same toolbar as\nthe 'Run' button. Giving a filename with a .R extension, such as\n'R","_","course","_","code.R', saves it as an R script file. The ",(0,i.kt)("inlineCode",{parentName:"li"},".R")," suffix\nlets RStudio know that the file is meant to be an R script."),(0,i.kt)("li",{parentName:"ul"},"Any scripts you make are separate files to the session data that is\nsaved when you close R.")),(0,i.kt)("p",null,"This is the usually the easiest way to work; if you need to close your\nsession and return to it another time, it is easy to run the code again\nfrom start to finish. If it were appropriate, all of the code stored in\na script can be executed in R from start to finish with the command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'source("script_name.R")\n')),(0,i.kt)("p",null,"You may recognise the function name ",(0,i.kt)("inlineCode",{parentName:"p"},"source")," from the button in the\neditor panel that does the same thing."),(0,i.kt)("h2",{id:"reading-in-data-from-a-file"},"Reading in data from a file"),(0,i.kt)("p",null,"The first thing we need to do is load or read in the data from our files\nso it is accessible in the current R session. There are a few possible\nways to do this but we will use the function ",(0,i.kt)("inlineCode",{parentName:"p"},"read.csv")," because our\nfiles are saved in 'comma-separated values' or csv format. To find out\ndetails of how to use this function you can search RStudio's Help\n(bottom right panel) or type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"help(read.csv)\n")),(0,i.kt)("p",null,"The help page shows us the arguments for this function and their default\nvalues where applicable. For example, we see ",(0,i.kt)("inlineCode",{parentName:"p"},'sep=","'),", which means the\nfields in a row will be separated on commas, and ",(0,i.kt)("inlineCode",{parentName:"p"},"header=TRUE"),", which\nmeans it is expecting the first row of the file to contain names for\neach column. The first file we will work with is the one named\n'inflammation","_","data.csv'. If we inspect this file in Excel or a text\neditor (by opening it directly from its location on your computer) we\nsee there are no column names, just a large set of numerical values.\nTherefore, we need to explicitly include the header argument in our\ncommand, changing it to FALSE to over-ride the default behaviour of the\nfunction. This is an example of how arguments modify a function's\nprecise behaviour, rather than requiring two separate functions to exist\nfor files with/without header rows."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'inf.data <- read.csv("inflammation_data.csv", header=FALSE)\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: if you see an error message similar to 'No such file or\ndirectory' when trying to read in a file, it is likely that either (i)\nthe file is not located in the current working directory, or (ii) there\nis one (or more) typos in the filename.")),(0,i.kt)("p",null,"It's useful to break this command down a little more."),(0,i.kt)("p",null,"We have given a name for a new object, ",(0,i.kt)("inlineCode",{parentName:"p"},"inf.data"),", in which to store the\ncontents of the file 'inflammation","_","data.csv'. Our object name is\ndescriptive without being too long, shortening 'inflammation' to 'inf'\nfor our convenience. We are using the in-built R function ",(0,i.kt)("inlineCode",{parentName:"p"},"read.csv"),",\nand provide two arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"the name of the file to read in"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"header=FALSE"),", indicating to R that our file does not have a header\nrow")),(0,i.kt)("p",null,"There are many other arguments to the ",(0,i.kt)("inlineCode",{parentName:"p"},"read.csv")," function to further\nrefine its behaviour but these are either optional or the default\nsettings are fine for most situations. By running this command, R\ncreates the object ",(0,i.kt)("inlineCode",{parentName:"p"},"inf.data")," and information about it appears in the\n'Environment' panel of RStudio."),(0,i.kt)("p",null,"Notice that, unlike the vectors we've created before, that it doesn't\nshow all the data stored in the object. It is detailed as ",(0,i.kt)("inlineCode",{parentName:"p"},"60 obs."),"\n(observations) ",(0,i.kt)("inlineCode",{parentName:"p"},"of 40 variables")," and if you hover the mouse pointer over\nthe name, ",(0,i.kt)("inlineCode",{parentName:"p"},"inf.data"),", it indicates that the object is a ",(0,i.kt)("inlineCode",{parentName:"p"},"data.frame"),",\nwhich is how R stores tabular data."),(0,i.kt)("p",null,"If you double-click on the object name or click on the spreadsheet icon\nto the righthand side, the contents of the object are loaded in the\ntop-left panel in a new tab. The columns have been automatically named\nby R as ",(0,i.kt)("inlineCode",{parentName:"p"},"V1")," through to ",(0,i.kt)("inlineCode",{parentName:"p"},"V40"),", as column names have to start with a\nletter. The rows are simply numbered \u2013 the only restriction to row names\nis that they must be unique."),(0,i.kt)("p",null,"What do you think will happen if you run the command above without\nincluding the header argument? Try it by saving the contents into a new\nobject called ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," and compare this to ",(0,i.kt)("inlineCode",{parentName:"p"},"inf.data"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'test <- read.csv("inflammation_data.csv")\n')),(0,i.kt)("p",null,"Another object named ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," now appears. View the contents of that\nobject and compare it to ",(0,i.kt)("inlineCode",{parentName:"p"},"inf.data"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This is a good example of how easily something unwanted can happen in R\nand the importance of checking your objects contain what you intend them\nto. Any mistakes can simply be corrected by re-running the command e.g.\nwith the appropriate header argument, and overwriting any previous\nversion of the object.")),(0,i.kt)("h2",{id:"two-dimensional-data-structures"},"Two-dimensional data structures"),(0,i.kt)("p",null,"Our original file contained rows and columns of data, and R has suitable\n2-dimensional data structures to store such data: matrices and\ndataframes. These can both be thought of as tables of data, analogous to\nan Excel spreadsheet. Matrices require all columns to be of the same\ntype, while data frames can have columns of different data types. Given\nthat experimental data is often a mixture of numeric values (e.g.\nmeasurements) and associated descriptive information, data frames are a\nvery commonly used data structure in R."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"NB while it is possible to create a matrix object with mixed data\ntypes, R will use its internal hierarchy of data types to choose one\nthat is applicable to all of the data \u2013 often this means numerical\ncolumns get converted to character strings, and certain functions may\nnot perform as expected if this is not noticed, or they may produce an\nerror message.")),(0,i.kt)("p",null,"In this case, a data frame object has been created:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class(inf.data)\n")),(0,i.kt)("p",null,"We can check how each column of data has been treated by R, e.g. for the\nfirst column:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class(inf.data[, 1])\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"In fact, as all the columns contain data of the same type, R could\nequally well store this data as a matrix object. A data frame has been\ncreated because the functions ",(0,i.kt)("inlineCode",{parentName:"em"},"read.csv")," and ",(0,i.kt)("inlineCode",{parentName:"em"},"read.table")," are\nspecifically designed to deal with mixed column classes and produce data\nframes by default. Another function ",(0,i.kt)("inlineCode",{parentName:"em"},"scan")," can be used to read in\nmatrices, especially large ones.")),(0,i.kt)("p",null,"It is worth noting that some functions operate on matrix objects, and so\nconverting between classes is sometimes needed. R has some standard\nfunctions for converting from one class to another."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"inf.data <- as.matrix(inf.data)\nclass(inf.data)\n")),(0,i.kt)("p",null,"We will continue with the matrix form of this object for now, and load a\nmixed dataset later. Most operations on either kind of 2-dimensional\nobject are the same. For example, we can find the dimensions of a matrix\nor a data frame with the ",(0,i.kt)("inlineCode",{parentName:"p"},"dim")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dim(inf.data)\n")),(0,i.kt)("p",null,"The output of ",(0,i.kt)("inlineCode",{parentName:"p"},"dim")," is printed to the screen and shows the number of\nrows the object contains, followed by the number of columns (the\nconvention is always rows, then columns but this can be hard to remember\nat first as there is no indication of which way round it is in the\nsyntax)."),(0,i.kt)("p",null,"If unsure, the functions ",(0,i.kt)("inlineCode",{parentName:"p"},"nrow")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ncol")," will return the number of\nrows or columns respectively:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nrow(inf.data)\nncol(inf.data)\n")),(0,i.kt)("p",null,"This particular file suffers from the lack of any labels to annotate\nwhat data is recorded in the rows and columns. The Software Carpentry\ntutorial provides the following information:"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},'\u201cWe are studying inflammation in patients who have been given a new\ntreatment for arthritis. Each row holds the observations for just one\npatient. Each column holds the inflammation measured in a day, so we\nhave a set of values in successive days."')),(0,i.kt)("p",null,"Our object has 60 rows and 40 columns, so we infer from the information\nabove that there are 60 patients, and 40 days."),(0,i.kt)("p",null,"Again we see a way for mistakes to easily creep into data analysis \u2013\nhere we have to rely on information given to us second-hand to know what\nis what. What if that information were wrong? Are there any checks we\ncan make ourselves to be sure patients are in rows? We are not told how\nmany patients were included so simply checking the number of rows won't\nhelp. And what if there were 50 patients and measurements taken over 50\ndays?"),(0,i.kt)("p",null,"Even with careful scrutiny it would be hard to know how the data are\npresented (patients in rows or columns) from the data alone. We could\nperhaps make some plots to help us, or we might spot the zero values in\nthe first column. Scrolling down the object display in the top-left\npanel or displaying the first column in the console confirms they are\nall zeroes, and the values in each row tend to rise across the first few\ncolumns. We may be reassured by this that the patients are indeed in the\nrows, since we might expect inflammation to rise over time, and an\nindividual recording 0 on every single day might be unlikely (though not\nimpossible)."),(0,i.kt)("p",null,"It would be prudent to add some row and column names to reduce the\nchance of making a mistake later when dealing with this data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'rownames(inf.data) <- paste("Patient", 1:60, sep="_")\ncolnames(inf.data) <- paste("Day", 1:40, sep="_")\n')),(0,i.kt)("p",null,"This introduces the very useful and versatile function ",(0,i.kt)("inlineCode",{parentName:"p"},"paste"),". Note\nthat adding row and column names does not change the size of the data\nobject, but we can see them displayed by reloading the object. The row\nand column names are not part of the data itself. They are similar to\nthe alphabetical columns and numbered rows in an Excel spreadsheet."),(0,i.kt)("h2",{id:"accessing-data"},"Accessing data"),(0,i.kt)("p",null,"Earlier we looked at accessing elements of a one-dimensional vector\nobject. For matrices and dataframes, a similar approach with square\nbrackets is used:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"object_name[rows,  cols]")),(0,i.kt)("p",null,"By specifying the rows and columns of interest, an object can be subset\nin a variety of ways to inspect or extract different parts of it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"inf.data[1, 1] # this pulls out the data value in the first row of the first column\ninf.data[30, 20] # any single entry can be extracted by specifying the row and column\n")),(0,i.kt)("p",null,"Think about how might you select the data in the first 5 rows for the\nfirst 5 columns."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"## If we need to select non-contiguous portions of the object, we'll need the help of c():\ninf.data[c(1, 3, 5), c(10, 20)]\n\n## If you want to display all columns for selected row(s), leave blank space after the comma:\ninf.data[5, ] # All columns for row 5\n\n## Or blank space before the comma to select all rows for given column(s):\ninf.data[, 1:5] # all rows, columns 1 through 5\n")),(0,i.kt)("p",null,"When you select a single column from a data frame, R will 'helpfully'\nturn it into a vector:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"test <- inf.data[, 2] # Select the second column\nclass(test)\n")),(0,i.kt)("p",null,"This can cause errors if you were expecting ",(0,i.kt)("inlineCode",{parentName:"p"},"test")," to still be a data\nframe in a later command."),(0,i.kt)("p",null,"We added column names to our object earlier. Rows and columns can also\nbe accessed by name (in double-quotes) inside square brackets. ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," is a\nshorthand way of referring to a named column in R. Both alternatives in\nthe snippet below return the same vector."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'inf.data[, "Day_3"]\ninf.data$Day_3\n')),(0,i.kt)("p",null,"Suppose you want to determine the maximum inflammation for patient 5\nacross days three to seven. To do this you would extract the relevant\nsubset from the data frame and calculate the maximum value. Which of the\nfollowing lines of R code gives the correct answer?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"max(inf.data[5, ])")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"max(inf.data[3:7, 5])")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"max(inf.data[5, 3:7])")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"max(inf.data[5, 3, 7])"))),(0,i.kt)("h2",{id:"analysing-data"},"Analysing data"),(0,i.kt)("p",null,"We can perform many simple analyses of the data by applying functions\nsuch as max, min, mean, or summary to our data object. We might want to\ndetermine the maximum value per patient or the average value per day.\nThe following examples illustrate how this can be done extremely\nefficiently in R, starting with an approach that is the opposite (and\ndefinitely not recommended!)."),(0,i.kt)("p",null,"Suppose we want to find the maximum inflammation score for each patient\nacross the 40 days of measurements. Let's start by calculating it for\npatient 1."),(0,i.kt)("p",null,"Extracting the data for patient 1 (i.e. the first row) is the first\nobvious step, and perhaps we decide it makes sense to store the values\nfor this patient in a new object:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"inf.patient1 <- inf.data[1, ]\n")),(0,i.kt)("p",null,"We can then calculate the maximum value for Patient 1:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"max(inf.patient1)\n")),(0,i.kt)("p",null,"Although this seems reasonable enough, there are several issues:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"We've created an additional object to store data that is simply a\nduplicate of what is already contained in our original object"),(0,i.kt)("li",{parentName:"ul"},"It doesn't scale well to do this for all 60 patients"),(0,i.kt)("li",{parentName:"ul"},"The result is output to the console and therefore hard to do\nanything further with")),(0,i.kt)("p",null,"If we did continue with this approach, there would be 60 new objects\n(all with very similar names), a high probability of having made a\ntyping mistake somewhere (perhaps overwriting one patient's data with\nanother), and a large set of results that we'd have to manually write\ndown or transfer to an Excel spreadsheet \u2013 all of which is very messy\nand prone to error."),(0,i.kt)("p",null,"We can easily dispense with the intermediate step of creating a new\nobject:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'# max inflammation for patient 1\nmax(inf.data[1, ])\n\n# or equivalently\nmax(inf.data["Patient_1", ])\n')),(0,i.kt)("p",null,"These commands are the same as extracting the data for patient 1 as we\ndid earlier, but instead of printing to the screen or storing in a new\nobject, the command is used directly as an argument to the function\n",(0,i.kt)("inlineCode",{parentName:"p"},"max")," by enclosing in the parentheses."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Commands can be nested in this way to achieve multiple steps in a\nsingle line of code; too many commands in one line though can make it\nharder to work out what the code is doing, as well as increase the\nchance of the code not doing as intended \u2013 the location of brackets\nbecomes vital.")),(0,i.kt)("p",null,"We'd really like a way to this for all 60 patients without duplicating\nthe code 60 times. Loops are one option (not discussed here) but the\n",(0,i.kt)("inlineCode",{parentName:"p"},"apply")," function is the most efficient approach:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"apply")," allows us to repeat a function on all of the rows (",(0,i.kt)("inlineCode",{parentName:"p"},"MARGIN = 1"),")\nor columns (",(0,i.kt)("inlineCode",{parentName:"p"},"MARGIN = 2"),") of a data frame simultaneously:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"max_inf_patient <- apply(inf.data, MARGIN=1, max)\n")),(0,i.kt)("p",null,"Similarly, we could compute the average inflammation per day with a\nsingle line of code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"avg_inf_day <- apply(inf.data, MARGIN=2, mean)\n")),(0,i.kt)("p",null,"Comparing these two commands will help understand the ",(0,i.kt)("inlineCode",{parentName:"p"},"apply")," function,\nwhich is not intuitive but highly efficient as we have seen. The\narguments to ",(0,i.kt)("inlineCode",{parentName:"p"},"apply")," are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The data object"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"MARGIN"),", indicating whether to apply over rows (1) or columns (2)"),(0,i.kt)("li",{parentName:"ul"},"The name of the function to be applied (functions can sometimes be\ntreated as objects when used as arguments for other functions)")),(0,i.kt)("p",null,"We wanted to find the maximum inflammation score for each patient, so we\nlooked across the rows and used the ",(0,i.kt)("inlineCode",{parentName:"p"},"max")," function. To modify the\ncommand to find the average inflammation per day, we switched the MARGIN\nargument to 2 for columns, and gave the final argument as ",(0,i.kt)("inlineCode",{parentName:"p"},"mean"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"While the MARGIN argument is explicitly assigned above, R is equally\nhappy to infer from the shortened command ",(0,i.kt)("inlineCode",{parentName:"em"},"apply(inf.data, 1, max)")," that\nthe 1 should be assigned to the second defined argument of ",(0,i.kt)("inlineCode",{parentName:"em"},"apply"),". You\ncan also write your own bespoke functions as required and use apply to\nrun them over an object.")),(0,i.kt)("p",null,"We have also solved the final issue with our initial approach by storing\nthe results in suitably-named objects for further work."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"length(max_inf_patient)\nhead(max_inf_patient)\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"head")," is a function that shows the first six elements of a vector or\nthe first 6 rows of a data frame."),(0,i.kt)("p",null,"Another useful function is ",(0,i.kt)("inlineCode",{parentName:"p"},"summary"),". This returns the minimum value,\nfirst quartile, median, mean, third quartile and the maximum value, all\nvery useful information to make an initial inspection of your data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"summary(inf.data[, 1:4]) # for each of the first 4 days\n")),(0,i.kt)("h2",{id:"plotting-data"},"Plotting data"),(0,i.kt)("p",null,"Visualising data is a vital part of statistical analysis, and R's\nplotting capabilities are a key reason for its popularity. There is a\nrelated course R: Visualisation that you can take if interested to learn\nmore. Here, we introduce ways to make a few simple plots. Let's take a\nlook at the average inflammation over time. Recall that we already\ncalculated these values above and saved them in an object named\n",(0,i.kt)("inlineCode",{parentName:"p"},"avg_inf_day"),". Plotting the values is done with the function ",(0,i.kt)("inlineCode",{parentName:"p"},"plot"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'plot(avg_inf_day)\n\n## Default labels and settings are used but we can refine our plot with some additional arguments:\nplot(avg_inf_day, main="Inflammation Scores Over Time", xlab="Day", ylab="Average_inflammation_score") # adding title and axis labels\nplot(avg_inf_day, main="Inflammation Scores Over Time", xlab="Day", ylab="Average_inflammation_score", pch=4, col="red") # changing the plotting symbols and colour\n\n## Similarly, we could plot the data per patient:\nplot(max_inf_patient)\n\n## Here, we might decide to use a boxplot instead:\nboxplot(max_inf_patient, main="Maximum Inflammation Scores", ylab="Max_inf_score")\nlegend("topright", legend="n=60 patients", cex=0.8) # adding a legend\n')),(0,i.kt)("p",null,"In RStudio, the 'Plots' panel in the bottom right contains a history of\nall the plots you've made in the current session. In vanilla R, a new\nplot will replace the existing one unless you create a new window for\nit."),(0,i.kt)("p",null,"When we are happy with our plots, they can be saved to a file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'pdf("Inflammation_plots.pdf", onefile=T)\nplot(avg_inf_day, main="Inflammation Scores Over Time", xlab="Day", ylab="Average_inflammation_score", pch=4, col="red")\nboxplot(max_inf_patient, main="Maximum Inflammation Scores", ylab="Max_inf_score")\nlegend("topright", legend="n=60 patients", cex=0.8)\ndev.off()\n')),(0,i.kt)("p",null,"This will be saved to the current working directory by default so if we\ncheck the folder, a new file named 'Inflammation","_","plots.pdf' should have\nbeen created. The ",(0,i.kt)("inlineCode",{parentName:"p"},"onefile=T")," argument instructs R to append additional\nplots to the same file and the ",(0,i.kt)("inlineCode",{parentName:"p"},"dev.off()")," command at the end closes the\nfile connection. You can also export plots directly to a pdf file from\nthe RStudio 'Plot' panel."),(0,i.kt)("h2",{id:"handling-data-with-factors"},"Handling data with factors"),(0,i.kt)("p",null,"We'll next read in data from another file to illustrate a few more\nfeatures of data frames and how to work with them in R. In this case the\nfile does contain a header row and the default arguments for read.csv\nare appropriate for this file so we only need provide the filename:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'data2 <- read.csv("sample.csv")\nhead(data2)\n')),(0,i.kt)("p",null,"This displays the first 6 rows, and we can see immediately that we have\na range of different types of data in each column. Let's see how R has\ntreated it (you can paste the following 4 lines as one block)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"for(i in 1:ncol(data2)) {\n    print(class(data2[, i]))\n}\n")),(0,i.kt)("p",null,"Here, we've used a ",(0,i.kt)("inlineCode",{parentName:"p"},"for")," loop to iterate over each column in the object\n",(0,i.kt)("inlineCode",{parentName:"p"},"data2"),", and print to screen the class of each column. The output tells\nus that columns 1:3 are treated as characters, and mostof the rest are\ntreated as integers. Column 5 is 'numeric', the basic data type in R for\nnon-integer numbers. R has a number of different classes of data it can\nstore and sometimes functions will behave differently depending on what\ntype of data they are given."),(0,i.kt)("p",null,"Although columns 1 \u2013 3 are currently characters, some functions in R\nthat perform statistical analysis prefer a data type called 'factors'.\nFactors are useful when you have category data, where the character data\ncan only come from a well defined set of possibilities. Factors can be\nuseful when you want to make sure incorrect values don't creep in\naccidentally, because R will report an error if factor data tries to be\nchanged to value outside that set."),(0,i.kt)("p",null,"We can specifically convert the Group column to a factor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"data2$Group <- as.factor(data2$Group)\nclass(data2$Group)\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"as.factor")," function returns a factor version of a vector. However,\nas this doesn't change the original ",(0,i.kt)("inlineCode",{parentName:"p"},"data2")," object by itself, we need to\nassign that vector of factors back to the column, replacing what was\nthere before. You can see how using the ",(0,i.kt)("inlineCode",{parentName:"p"},"$")," syntax makes this line\neasier to read. R has a number of different ",(0,i.kt)("inlineCode",{parentName:"p"},"as.")," functions for\nconverting to different data types."),(0,i.kt)("p",null,"A very useful summary function is ",(0,i.kt)("inlineCode",{parentName:"p"},"table"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"table(data2$Group)\ntable(data2$Gender)\n")),(0,i.kt)("p",null,"This alerts us to the fact that data in the Gender column has not been\nentered consistently, which we might have already spotted from viewing\nthe object in RStudio."),(0,i.kt)("p",null,"To fix this, we can make sure ",(0,i.kt)("inlineCode",{parentName:"p"},"F")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"M")," are used throughout; this\ninvolves determining which rows contain a lowercase ",(0,i.kt)("inlineCode",{parentName:"p"},"f")," for example, and\nsubstituting with ",(0,i.kt)("inlineCode",{parentName:"p"},"F"),". Similarly for the lowercase case ",(0,i.kt)("inlineCode",{parentName:"p"},"m"),". The\nfollowing code does each a different way."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'data2$Gender <- gsub("f", "F", data2$Gender)\ndata2$Gender[data2$Gender=="m"] <- "M"\n\n## checking we have modified the data as intended\ntable(data2$Gender)\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"gsub")," function replaces the first argument ",(0,i.kt)("inlineCode",{parentName:"p"},'"f"')," with the second\nargument ",(0,i.kt)("inlineCode",{parentName:"p"},'"F"')," in the third argument ",(0,i.kt)("inlineCode",{parentName:"p"},"data2$Gender")," wherever it appears,\nleaving the other entries unchanged. As before, we need to assign this\nnew vector back to the original object."),(0,i.kt)("p",null,"The second line shows one of R's particularly useful features. We're\ntelling R to replace values in ",(0,i.kt)("inlineCode",{parentName:"p"},"data2$Gender"),", but only where those\nvalues equal ",(0,i.kt)("inlineCode",{parentName:"p"},'"m"'),". Indices in R can be used when assigning values to\nobjects, not just when extracting them."),(0,i.kt)("p",null,"This is one example of how there can be multiple ways of doing a\nparticular task in R. When deciding which method to use, in general, it\nis better to stick with the method you understand the best as that's the\nmethod where you are least likely to make a mistake. Some mistakes will\ncause R to generate an error, but the more dangerous mistakes are ones\nthat don't result in an error but result in incorrect data."),(0,i.kt)("h2",{id:"putting-it-together"},"Putting it together"),(0,i.kt)("p",null,"See if you can solve the following problem using R:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a new vector containing a set of any 9 letters, including at\nleast 3 vowels. Give your vector object a suitably descriptive name"),(0,i.kt)("li",{parentName:"ul"},"Check the length of your vector equals 9"),(0,i.kt)("li",{parentName:"ul"},"Now extract subsets of letters to create as many new short words as\nyou can"),(0,i.kt)("li",{parentName:"ul"},"Hint: use the ",(0,i.kt)("inlineCode",{parentName:"li"},"c()")," function and ",(0,i.kt)("inlineCode",{parentName:"li"},":")," operator within square brackets")),(0,i.kt)("h2",{id:"bioconductor"},"Bioconductor"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.bioconductor.org/"},"Bioconductor")," is a separate third-party\nrepository of R code, specifically geared towards bioinformatics. Many\nof the packages in Bioconductor are also available via R's usual package\ninstallation method. However, Bioconductor has its own preferred\ninstallation mechanism which gets around some of R's more annoying\nlimitations with version incompatibilities. In particular, the packages\nin Bioconductor are updated more swiftly following the release of a new\nversion of R. To get started with Bioconductor, use the following\ncommand:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'source("https://bioconductor.org/biocLite.R")\n')),(0,i.kt)("p",null,"This loads and runs an R script hosted on the web that defines a new\nfunction. You then use this function in a similar way to how you would\nuse the ",(0,i.kt)("inlineCode",{parentName:"p"},"install.packages")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'biocLite("limma")\n')),(0,i.kt)("p",null,"Loading Bioconductor packages this way is typically a longer process but\nmore reliable."),(0,i.kt)("h1",{id:"getting-help"},"Getting help"),(0,i.kt)("p",null,"As you read the R help pages, you may not find them terribly helpful.\nThe R ",(0,i.kt)("inlineCode",{parentName:"p"},"help")," function is most useful for refreshing your memory about\nspecific functions you have used before. Unfortunately, it is not very\nuseful for learning the how to use the functions in the first place."),(0,i.kt)("p",null,"There are several online forums used by R programmers, novice and\nexpert, to get help and advice from their peers. Searching for your R\nproblem will often give results from one of these forums."),(0,i.kt)("p",null,"One page 'quick reference' documents:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://queex.github.io/whg-training-resources/R-intro/r-cheat-sheet.pdf"},"R cheat\nsheet")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://queex.github.io/whg-training-resources/R-intro/R_reference_card.pdf"},"R reference\ncard"))),(0,i.kt)("h1",{id:"further-resources-and-useful-information"},"Further resources and useful information"),(0,i.kt)("p",null,"The Software Carpentry Foundation website contains many tutorials for\nlearning a variety of programming languages, including R. There is also\na series of domain-specific Data Carpentry courses, which focus on\ncomputational skills needed to handle and analyse data \u2013 tutorials are\ncurrently available for Ecology, Genomics, Geospatial Data and Social\nSciences, with others in development."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://software-carpentry.org/lessons/"},"Software Carpentry\nlessons")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://datacarpentry.org/lessons/"},"Data Carpentry lessons"))),(0,i.kt)("p",null,"In particular, the tutorials at the following links give further details\nand examples on some of the ideas already introduced or extend to other\ntopics once you feel comfortable interacting with the R environment."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/index.html"},"Data\nstructures")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/11-supp-read-write-csv/index.html"},"Read and write csv\nfiles")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/12-supp-factors/index.html"},"Factors")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/10-supp-addressing-data/index.html"},"Addressing\ndata")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"http://swcarpentry.github.io/r-novice-inflammation/06-best-practices-R/index.html"},"Best\npractices")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://datacarpentry.org/R-genomics/"},"R genomics")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://datacarpentry.org/r-intro-geospatial/"},"Geospatial data"))),(0,i.kt)("h1",{id:"putting-it-together-example-solution"},"Putting it together example solution"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'random_letters <- c("r", "t", "d", "e", "e", "i", "a", "s", "n")\nlength(random_letters)\n# [1] 9\nrandom_letters[c(8, 7, 6, 3)]\n# [1] "s" "a" "i" "d"\nrandom_letters[c(1, 7, 6, 8, 4)]\n# [1] "r" "a" "i" "s" "e"\nrandom_letters[c(8, 2, 4:5, 1)]\n# [1] "s" "t" "e" "e" "r"\nrandom_letters[c(2, 1, 4, 4)]\n# [1] "t" "r" "e" "e"\n')),(0,i.kt)("h1",{id:"epilogue-good-programming-habits"},"Epilogue: good programming habits"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Break it down into small steps",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Write code to do individual parts of your overall task and build\nit up into a larger script"),(0,i.kt)("li",{parentName:"ul"},"This makes it easier to get right and test as you are going\nalong"),(0,i.kt)("li",{parentName:"ul"},"It is also a good way to solve errors/bugs in your code"))),(0,i.kt)("li",{parentName:"ol"},"Pay attention to details and program carefully",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Commands must be accurate both in their syntax and what they do"),(0,i.kt)("li",{parentName:"ul"},"It is easy to overwrite objects, pull out wrong subsets of data,\nmix up sample names etc."),(0,i.kt)("li",{parentName:"ul"},"To avoid this, you need to check carefully all the time what you\nare working with and what R produces after you run a command"),(0,i.kt)("li",{parentName:"ul"},"Inspect object contents, make plots, test examples can all\nhelpGood programming habits"))),(0,i.kt)("li",{parentName:"ol"},"Test your code thoroughly",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"You are the only person who can make sure it is doing what you\nintend it to do"),(0,i.kt)("li",{parentName:"ul"},"R will give an error if a command is incorrectly specified\naccording to the rules of the language but it can't tell you if\nthe command you've written does not do what you think it does\u2026"),(0,i.kt)("li",{parentName:"ul"},"\u2026and it will go ahead and execute it regardless, because that is\nwhat you have instructed R to do!"))),(0,i.kt)("li",{parentName:"ol"},"Comment your code",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Comments are really useful to jog your memory if you come back\nto some code after a while or want someone else to understand\nit.")))),(0,i.kt)("h1",{id:"finally"},"Finally\u2026"),(0,i.kt)("p",null,"Please let us know if you have any questions and good luck on your\nprogramming journey!"),(0,i.kt)("p",null,"We are happy to help anytime:\n",(0,i.kt)("a",{parentName:"p",href:"mailto://bioinformatics@well.ox.ac.uk"},"bioinformatics@well.ox.ac.uk")))}p.isMDXComponent=!0},1015:function(e,t,n){t.Z=n.p+"assets/images/RStudio_screenshot-cece01842a38154ea4b5f6cd4e4a8150.png"}}]);